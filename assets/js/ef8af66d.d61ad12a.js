"use strict";(self.webpackChunksummary=self.webpackChunksummary||[]).push([["2758"],{3828:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>o,toc:()=>d,default:()=>c,metadata:()=>r,assets:()=>p,contentTitle:()=>l});var r=JSON.parse('{"id":"Java/JavaBase/file upload","title":"Java \u6587\u4EF6\u76F8\u5173","description":"\u4F7F\u7528 RestTemplate \u4E0A\u4F20\u6587\u4EF6","source":"@site/docs/01-Java/01-JavaBase/03-file upload.mdx","sourceDirName":"01-Java/01-JavaBase","slug":"/Java/JavaBase/file upload","permalink":"/summary/Java/JavaBase/file upload","draft":false,"unlisted":false,"editUrl":"https://github.com/Halcyon666/summary/edit/main/docs/01-Java/01-JavaBase/03-file upload.mdx","tags":[],"version":"current","lastUpdatedBy":"Halcyon666","lastUpdatedAt":1758507041000,"sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"APT \u4F7F\u7528","permalink":"/summary/Java/JavaBase/annotation processor"},"next":{"title":"Spring Core","permalink":"/summary/Java/Spring/Spring-Core"}}'),a=n(5813),i=n(6436),s=n(145);let o={},l="Java \u6587\u4EF6\u76F8\u5173",p={},d=[{value:"\u4F7F\u7528 RestTemplate \u4E0A\u4F20\u6587\u4EF6",id:"\u4F7F\u7528-resttemplate-\u4E0A\u4F20\u6587\u4EF6",level:2},{value:"\u4F7F\u7528 HttpClient \u4E0A\u4F20\u6587\u4EF6",id:"\u4F7F\u7528-httpclient-\u4E0A\u4F20\u6587\u4EF6",level:2},{value:"\u4F7F\u7528 Vfs2 \u4E0A\u4F20\u6587\u4EF6\u62A5\u9519",id:"\u4F7F\u7528-vfs2-\u4E0A\u4F20\u6587\u4EF6\u62A5\u9519",level:2}];function u(e){let t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"java-\u6587\u4EF6\u76F8\u5173",children:"Java \u6587\u4EF6\u76F8\u5173"})}),"\n",(0,a.jsx)(t.h2,{id:"\u4F7F\u7528-resttemplate-\u4E0A\u4F20\u6587\u4EF6",children:"\u4F7F\u7528 RestTemplate \u4E0A\u4F20\u6587\u4EF6"}),"\n",(0,a.jsxs)(t.p,{children:["\u4F7F\u7528 Spring-Boot \u65F6\u96C6\u6210 Resttemplate \u65E0\u9700\u989D\u5916\u5BFC\u5305",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:"Controller"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'package whalefall.filedownloadorup;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.multipart.MultipartFile;\n\n/**\n * @author: WhaleFall541\n * @date: 2021/11/25 22:29\n */\n@RestController\n@Slf4j\npublic class Test4HtmlController {\n\n    @PostMapping("upload1")\n    public String upload1(@RequestParam("file") MultipartFile file, @RequestParam("test") String test) {\n        log.info("upload1 {} test {}", file.getOriginalFilename(), test);\n        return "OK";\n    }\n\n}\n\n'})})]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:"\u4F7F\u7528 Resttemplate FileSystemResource \u5355\u5143\u6D4B\u8BD5\u4EE3\u7801"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'package whalefall.filedownloadorup;\n\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.http.*;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.io.File;\n\nimport static whalefall.filedownloadorup.TestHttpClientUpload1.FILE_PATH;\nimport static whalefall.filedownloadorup.TestHttpClientUpload1.UPLOAD_URL;\n\n/**\n * @author Halcyon\n * @since 1.0.0\n */\npublic class TestRestTemplateUpload {\n    private static final Logger logger = LoggerFactory.getLogger(TestHttpClientUpload1.class);\n    @Test\n    public void testResttemplateUpload() {\n        File file = new File(FILE_PATH);\n\n        // \u521B\u5EFARestTemplate\u5B9E\u4F8B\n        RestTemplate restTemplate = new RestTemplate();\n\n        // \u6784\u5EFA\u8BF7\u6C42\u4F53\n        MultiValueMap<String, Object> requestBody = new LinkedMultiValueMap<>();\n        // ByteArrayResource \u4E5F\u53EF\u4EE5\u4F46\u662F\u8981\u8986\u76D6getFilename\u65B9\u6CD5 \u9002\u7528\u4E8Ebyte\u5B57\u8282\u6587\u4EF6\n        requestBody.add("file", new FileSystemResource(file)); // \u6DFB\u52A0\u6587\u4EF6\n        requestBody.add("test", "testResttemplateUpload test");\n\n        // \u8BBE\u7F6E\u8BF7\u6C42\u5934\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.MULTIPART_FORM_DATA);\n\n        // \u521B\u5EFAHttpEntity\uFF0C\u5C06\u8BF7\u6C42\u4F53\u548C\u8BF7\u6C42\u5934\u5C01\u88C5\u8FDB\u53BB\n        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(requestBody, headers);\n\n        // \u53D1\u9001POST\u8BF7\u6C42\n        ResponseEntity<String> response = restTemplate.exchange(UPLOAD_URL, HttpMethod.POST, requestEntity, String.class);\n\n        // \u83B7\u53D6\u670D\u52A1\u5668\u7684\u54CD\u5E94\u72B6\u6001\u7801\u548C\u54CD\u5E94\u4F53\n        int statusCode = response.getStatusCodeValue();\n        String responseBody = response.getBody();\n\n        Assertions.assertEquals(200, statusCode);\n        Assertions.assertEquals("OK", responseBody);\n    }\n}\n\n'})})]}),"\n",(0,a.jsx)(t.p,{children:"\u63A8\u8350\u4F7F\u7528\u8FD9\u79CD"}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:"\u4F7F\u7528 Resttemplate ByteArrayResource \u5355\u5143\u6D4B\u8BD5\u4EE3\u7801"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'package whalefall.filedownloadorup;\n\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.ByteArrayResource;\nimport org.springframework.http.*;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.Objects;\n\nimport static whalefall.filedownloadorup.TestHttpClientUpload1.FILE_PATH;\nimport static whalefall.filedownloadorup.TestHttpClientUpload1.UPLOAD_URL;\n\n/**\n * @author Halcyon\n * @since 1.0.0\n */\npublic class TestRestTemplateUpload2 {\n    private static final Logger logger = LoggerFactory.getLogger(TestHttpClientUpload1.class);\n\n    public static byte[] readFileAsByteArray(String filePath) {\n        try (FileInputStream fis = new FileInputStream(filePath);\n             ByteArrayOutputStream bos = new ByteArrayOutputStream()) {\n\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            while ((bytesRead = fis.read(buffer)) != -1) {\n                bos.write(buffer, 0, bytesRead);\n            }\n            return bos.toByteArray();\n        } catch (IOException e) {\n            logger.error(e.getMessage(), e);\n        }\n        return null;\n    }\n\n    @Test\n    public void testResttemplateUpload() throws IOException {\n\n        // \u521B\u5EFARestTemplate\u5B9E\u4F8B\n        RestTemplate restTemplate = new RestTemplate();\n\n        // \u6784\u5EFA\u8BF7\u6C42\u4F53\n        MultiValueMap<String, Object> requestBody = new LinkedMultiValueMap<>();\n        requestBody.add("file", new ByteArrayResource(Objects.requireNonNull(readFileAsByteArray(FILE_PATH))) {\n            @Override\n            public String getFilename() {\n                return "test.xlsx";\n            }\n        });\n        requestBody.add("test", "testResttemplateUpload2 test");\n\n        // \u8BBE\u7F6E\u8BF7\u6C42\u5934\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.MULTIPART_FORM_DATA);\n\n        // \u521B\u5EFAHttpEntity\uFF0C\u5C06\u8BF7\u6C42\u4F53\u548C\u8BF7\u6C42\u5934\u5C01\u88C5\u8FDB\u53BB\n        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(requestBody, headers);\n\n        // \u53D1\u9001POST\u8BF7\u6C42\n        ResponseEntity<String> response = null;\n        try {\n            response = restTemplate.exchange(UPLOAD_URL, HttpMethod.POST, requestEntity, String.class);\n            // \u83B7\u53D6\u670D\u52A1\u5668\u7684\u54CD\u5E94\u72B6\u6001\u7801\u548C\u54CD\u5E94\u4F53\n            int statusCode = response.getStatusCodeValue();\n            String responseBody = response.getBody();\n\n            Assertions.assertEquals(200, statusCode);\n            Assertions.assertEquals("OK", responseBody);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n\n    }\n}\n\n'})})]}),"\n",(0,a.jsx)(t.h2,{id:"\u4F7F\u7528-httpclient-\u4E0A\u4F20\u6587\u4EF6",children:"\u4F7F\u7528 HttpClient \u4E0A\u4F20\u6587\u4EF6"}),"\n",(0,a.jsx)(t.p,{children:"\u5BFC\u5305"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-groovy",children:"    implementation 'org.apache.httpcomponents:httpclient:4.5.13'\n    implementation 'org.apache.httpcomponents:httpmime:4.5.13'\n"})}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:"\u4F7F\u7528 HttpClient \u5355\u5143\u6D4B\u8BD5\u4EE3\u7801"}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'package whalefall.filedownloadorup;\n\nimport org.apache.http.HttpEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.entity.mime.MultipartEntityBuilder;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Objects;\n\n/\\*\\*\n\n- @author Halcyon\n- @since 1.0.0\n  \\*/\n  public class TestHttpClientUpload1 {\n  // \u66FF\u6362\u4E3A\u8981\u53D1\u9001\u7684 Excel \u6587\u4EF6\u8DEF\u5F84\n  public static final String FILE_PATH = Objects.requireNonNull(TestHttpClientUpload1.class.getResource("/exceltemplet/priceListTemplate.xlsx")).getPath();// \u66FF\u6362\u4E3A\u63A5\u6536\u6587\u4EF6\u7684\u670D\u52A1\u5668 URL\n  public static final String UPLOAD_URL = "http://localhost:8080/upload1";\n  private static final Logger logger = LoggerFactory.getLogger(TestHttpClientUpload1.class);\n\n      @Test\n      public void testHttpClientUpload() {\n\n          File file = new File(FILE_PATH);\n          // \u521B\u5EFACloseableHttpClient\u5B9E\u4F8B\n          CloseableHttpClient httpClient = HttpClients.createDefault();\n          // \u521B\u5EFAHttpPost\u8BF7\u6C42\n          HttpPost httpPost = new HttpPost(UPLOAD_URL);\n          // \u521B\u5EFAMultipart\u5B9E\u4F53\n          MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n          builder.addBinaryBody("file", file, ContentType.APPLICATION_OCTET_STREAM, file.getName());\n          // \u6DFB\u52A0\u5176\u4ED6\u53C2\u6570\n          builder.addTextBody("test", "testHttpClientUpload test");\n          // \u8BBE\u7F6E\u8BF7\u6C42\u5B9E\u4F53\n          HttpEntity entity = builder.build();\n          httpPost.setEntity(entity);\n          int statusCode = 500;\n          // \u53D1\u9001HttpPost\u8BF7\u6C42\uFF0C\u5E76\u83B7\u53D6\u670D\u52A1\u5668\u7684\u54CD\u5E94\n          try (CloseableHttpResponse response = httpClient.execute(httpPost)) {\n              // \u83B7\u53D6\u670D\u52A1\u5668\u7684\u54CD\u5E94\u72B6\u6001\u7801\n              statusCode = response.getStatusLine().getStatusCode();\n              // \u5728\u8FD9\u91CC\u53EF\u4EE5\u5904\u7406\u670D\u52A1\u5668\u7684\u54CD\u5E94\uFF0C\u6BD4\u5982\u68C0\u67E5\u662F\u5426\u4E0A\u4F20\u6210\u529F\u7B49\n          } catch (IOException e) {\n              logger.error(e.getMessage(), e);\n          }\n          Assertions.assertEquals(200, statusCode);\n      }\n\n}\n\n'})})]}),"\n",(0,a.jsx)(t.h2,{id:"\u4F7F\u7528-vfs2-\u4E0A\u4F20\u6587\u4EF6\u62A5\u9519",children:"\u4F7F\u7528 Vfs2 \u4E0A\u4F20\u6587\u4EF6\u62A5\u9519"}),"\n",(0,a.jsx)(t.p,{children:"\u62A5\u9519\u65B9\u6CD5\uFF1Aorg.apache.commons.vfs2.impl.StandardFileSystemManager#init"}),"\n",(0,a.jsxs)(t.p,{children:["\u90E8\u7F72\u73AF\u5883\u62A5\u9519\uFF1A",(0,a.jsx)("br",{}),'\nFailed Could not load VFS configuration from\n"jar:file:/opt/deployments/BOOT-INF/lib/commons-vfs2-2.9.0.jar!/org/apache/commons/vfs2/impl/providers.xml".']}),"\n",(0,a.jsxs)(t.p,{children:["\u672C\u5730\u8C03\u8BD5\u62A5\u9519: ",(0,a.jsx)("br",{}),"\nConnection timed out: connect"]}),"\n",(0,a.jsx)(t.p,{children:"\u5DF2\u7ECF\u9A8C\u8BC1\uFF0C\u786E\u5B9E\u662F\u7F51\u7EDC\u8FDE\u901A\u6027\u9020\u6210\u7684\u8FD9\u4E2A\u62A5\u9519\u3002"}),"\n","\n",(0,a.jsx)(s.A,{})]})}function c(e={}){let{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);