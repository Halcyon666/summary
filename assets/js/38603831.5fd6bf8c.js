"use strict";(self.webpackChunksummary=self.webpackChunksummary||[]).push([["2762"],{49279:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>a,toc:()=>d,default:()=>h,metadata:()=>i,assets:()=>c,contentTitle:()=>l});var i=JSON.parse('{"id":"Frontend/Drag and Drop Container Movement","title":"A Robust Draggable Element","description":"A Robust Draggable Element","source":"@site/docs/02-Frontend/16-Drag and Drop Container Movement.mdx","sourceDirName":"02-Frontend","slug":"/Frontend/Drag and Drop Container Movement","permalink":"/summary/Frontend/Drag and Drop Container Movement","draft":false,"unlisted":false,"editUrl":"https://github.com/Halcyon666/summary/edit/main/docs/02-Frontend/16-Drag and Drop Container Movement.mdx","tags":[],"version":"current","lastUpdatedBy":"Halcyon666","lastUpdatedAt":1760157235000,"sidebarPosition":16,"frontMatter":{"title":"A Robust Draggable Element","sidebar_label":"A Robust Draggable Element","description":"A Robust Draggable Element"},"sidebar":"tutorialSidebar","previous":{"title":"Basic React","permalink":"/summary/Frontend/react"},"next":{"title":"React\u5B66\u4E60","permalink":"/summary/Frontend/learn-react"}}'),s=t(65813),o=t(16545),r=t(60145);let a={title:"A Robust Draggable Element",sidebar_label:"A Robust Draggable Element",description:"A Robust Draggable Element"},l="Building a Robust Draggable Element: A Step-by-Step Bug Fixing Journey",c={},d=[{value:"The Initial Implementation",id:"the-initial-implementation",level:2},{value:"Bug #1: Container Sticks to Cursor After Mouse Release",id:"bug-1-container-sticks-to-cursor-after-mouse-release",level:2},{value:"Bug #2: Memory Leaks from Persistent Event Listeners",id:"bug-2-memory-leaks-from-persistent-event-listeners",level:2},{value:"Bug #3: Dragging Fails When Cursor Leaves Window",id:"bug-3-dragging-fails-when-cursor-leaves-window",level:2},{value:"Bug #4: Image Drag Interference",id:"bug-4-image-drag-interference",level:2},{value:"Bug #5: Click Events Trigger During Fast Drags",id:"bug-5-click-events-trigger-during-fast-drags",level:2},{value:"Bug #6: Element Can Be Dragged Off Screen",id:"bug-6-element-can-be-dragged-off-screen",level:2},{value:"Adding Click Functionality with Hint System",id:"adding-click-functionality-with-hint-system",level:2},{value:"Final Complete Code",id:"final-complete-code",level:2},{value:"Key Takeaways",id:"key-takeaways",level:2}];function g(e){let n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"building-a-robust-draggable-element-a-step-by-step-bug-fixing-journey",children:"Building a Robust Draggable Element: A Step-by-Step Bug Fixing Journey"})}),"\n",(0,s.jsx)(n.p,{children:"Creating a draggable element seems simple at first, but there are many edge cases and bugs that can ruin the user experience. This guide walks through building a draggable icon with text, and most importantly, how to fix all the common issues that arise."}),"\n",(0,s.jsx)(n.h2,{id:"the-initial-implementation",children:"The Initial Implementation"}),"\n",(0,s.jsx)(n.p,{children:"Let's start with a basic draggable container containing an icon and text:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>\u53EF\u62D6\u52A8\u56FE\u6807\u6587\u5B57</title>\n  <style>\n    body {\n      margin: 0;\n      height: 100vh;\n    }\n  </style>\n</head>\n<body>\n\n<script>\n  // Create container\n  const container = document.createElement('div');\n  container.style.display = 'flex';\n  container.style.flexDirection = 'column';\n  container.style.alignItems = 'center';\n  container.style.textAlign = 'center';\n  container.style.fontFamily = 'sans-serif';\n  container.style.position = 'fixed';\n  container.style.left = '20px';\n  container.style.bottom = '20px';\n  container.style.zIndex = '9999';\n  container.style.cursor = 'grab';\n  container.style.userSelect = 'none';\n\n  // Create icon\n  const img = document.createElement('img');\n  img.src = 'https://cdn-icons-png.flaticon.com/512/1828/1828817.png';\n  img.style.width = '60px';\n  img.style.display = 'block';\n\n  // Create text\n  const text = document.createElement('div');\n  text.textContent = '\u56FE\u6807\u8BF4\u660E';\n  text.style.marginTop = '2px';\n  text.style.fontSize = '14px';\n  text.style.color = '#333';\n\n  // Add elements\n  container.appendChild(img);\n  container.appendChild(text);\n  document.body.appendChild(container);\n\n  // Drag state\n  let isDragging = false;\n  let offsetX = 0;\n  let offsetY = 0;\n\n  // Mouse down\n  container.addEventListener('mousedown', (e) => {\n    if (e.button !== 0) return;\n    isDragging = true;\n    offsetX = e.clientX - container.getBoundingClientRect().left;\n    offsetY = e.clientY - container.getBoundingClientRect().top;\n    container.style.cursor = 'grabbing';\n    container.style.bottom = 'auto';\n  });\n\n  // Mouse move\n  document.addEventListener('mousemove', (e) => {\n    if (!isDragging) return;\n    container.style.left = `${e.clientX - offsetX}px`;\n    container.style.top = `${e.clientY - offsetY}px`;\n  });\n\n  // Mouse up\n  document.addEventListener('mouseup', (e) => {\n    if (e.button !== 0) return;\n    isDragging = false;\n    container.style.cursor = 'grab';\n  });\n<\/script>\n\n</body>\n</html>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"bug-1-container-sticks-to-cursor-after-mouse-release",children:"Bug #1: Container Sticks to Cursor After Mouse Release"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": After dragging and releasing the mouse button, the container continues to follow the cursor."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Root Cause"}),": The ",(0,s.jsx)(n.code,{children:"mouseup"})," event doesn't reliably report which button was released across all browsers. The condition ",(0,s.jsx)(n.code,{children:"e.button !== 0"})," sometimes fails."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Remove the button check in the mouseup handler and simplify the logic:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Fixed mouse up handler\ndocument.addEventListener('mouseup', () => {\n  if (isDragging) {\n    isDragging = false;\n    container.style.cursor = 'grab';\n  }\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"bug-2-memory-leaks-from-persistent-event-listeners",children:"Bug #2: Memory Leaks from Persistent Event Listeners"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": Event listeners remain active even when not dragging, causing performance issues."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Root Cause"}),": The ",(0,s.jsx)(n.code,{children:"mousemove"})," listener runs continuously, checking ",(0,s.jsx)(n.code,{children:"isDragging"})," on every mouse movement across the entire page."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Add and remove event listeners dynamically:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Event handler functions\nconst handleMouseMove = (e) => {\n  if (!isDragging) return;\n  container.style.left = `${e.clientX - offsetX}px`;\n  container.style.top = `${e.clientY - offsetY}px`;\n};\n\nconst stopDragging = () => {\n  if (isDragging) {\n    isDragging = false;\n    container.style.cursor = 'grab';\n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', stopDragging);\n  }\n};\n\n// Mouse down - add listeners\ncontainer.addEventListener('mousedown', (e) => {\n  if (e.button !== 0) return;\n  isDragging = true;\n  offsetX = e.clientX - container.getBoundingClientRect().left;\n  offsetY = e.clientY - container.getBoundingClientRect().top;\n  container.style.cursor = 'grabbing';\n  container.style.bottom = 'auto';\n  \n  // Add event listeners only when needed\n  document.addEventListener('mousemove', handleMouseMove);\n  document.addEventListener('mouseup', stopDragging);\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"bug-3-dragging-fails-when-cursor-leaves-window",children:"Bug #3: Dragging Fails When Cursor Leaves Window"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),': If you drag outside the browser window and release the mouse button, the element stays "stuck" to the cursor.']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Root Cause"}),": The ",(0,s.jsx)(n.code,{children:"mouseup"})," event doesn't fire when the mouse is released outside the browser window."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Use ",(0,s.jsx)(n.code,{children:"e.buttons"})," to detect button state during mouse movement:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const handleMouseMove = (e) => {\n  if (!isDragging) return;\n  \n  // Check if left mouse button is still pressed\n  if (e.buttons !== 1) {\n    stopDragging();\n    return;\n  }\n  \n  container.style.left = `${e.clientX - offsetX}px`;\n  container.style.top = `${e.clientY - offsetY}px`;\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["How ",(0,s.jsx)(n.code,{children:"e.buttons"})," works"]}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"0"})," = No buttons pressed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"1"})," = Left button pressed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"2"})," = Right button pressed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"4"})," = Middle button pressed"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"bug-4-image-drag-interference",children:"Bug #4: Image Drag Interference"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": Clicking on the image doesn't trigger dragging because the browser's default image drag behavior interferes."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Root Cause"}),": Images have built-in draggable behavior that conflicts with custom drag logic."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Disable default image drag behavior:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Create icon with drag prevention\nconst img = document.createElement('img');\nimg.src = 'https://cdn-icons-png.flaticon.com/512/1828/1828817.png';\nimg.style.width = '60px';\nimg.style.display = 'block';\nimg.draggable = false; // Disable default drag\nimg.style.pointerEvents = 'none'; // Let clicks pass through to container\n"})}),"\n",(0,s.jsx)(n.h2,{id:"bug-5-click-events-trigger-during-fast-drags",children:"Bug #5: Click Events Trigger During Fast Drags"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": When dragging quickly, the click event still fires, showing unwanted notifications."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Root Cause"}),": The click event detection was based on time and distance calculations, which can fail during rapid movements."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Track actual dragging state with a flag:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Add drag tracking\nlet hasDragged = false;\n\nconst handleMouseMove = (e) => {\n  if (!isDragging) return;\n  // \u{1F7E2} It means: \u201COnly proceed if the left mouse button is being held down during mouse movement.\u201D\n  if (e.buttons !== 1) {\n    stopDragging();\n    return;\n  }\n  \n  // Mark that actual dragging occurred\n  hasDragged = true;\n  \n  container.style.left = `${e.clientX - offsetX}px`;\n  container.style.top = `${e.clientY - offsetY}px`;\n};\n\n// Reset flag on mouse down\ncontainer.addEventListener('mousedown', (e) => {\n  // \u{1F7E2} It means: \u201COnly proceed if the left mouse button was clicked to start.\u201D\n  if (e.button !== 0) return;\n  isDragging = true;\n  hasDragged = false; // Reset drag flag\n  // ... rest of mousedown logic\n});\n\n// Simple click detection\ncontainer.addEventListener('click', (e) => {\n  // Only show hint if no actual dragging occurred\n  if (!hasDragged) {\n    showHint('\u4F60\u70B9\u51FB\u4E86\u53EF\u62D6\u62FD\u56FE\u6807\uFF01');\n  }\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"bug-6-element-can-be-dragged-off-screen",children:"Bug #6: Element Can Be Dragged Off Screen"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": The draggable element can be moved completely outside the visible area, making it inaccessible."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Root Cause"}),": No boundary checking in the drag logic."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Add viewport boundary constraints:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const handleMouseMove = (e) => {\n  if (!isDragging) return;\n  \n  if (e.buttons !== 1) {\n    stopDragging();\n    return;\n  }\n  \n  hasDragged = true;\n  \n  // Calculate new position\n  let newLeft = e.clientX - offsetX;\n  let newTop = e.clientY - offsetY;\n  \n  // Get container dimensions\n  const containerRect = container.getBoundingClientRect();\n  const containerWidth = containerRect.width;\n  const containerHeight = containerRect.height;\n  \n  // Get window dimensions\n  const windowWidth = window.innerWidth;\n  const windowHeight = window.innerHeight;\n  \n  // Apply boundary constraints\n  newLeft = Math.max(0, Math.min(newLeft, windowWidth - containerWidth));\n  newTop = Math.max(0, Math.min(newTop, windowHeight - containerHeight));\n  \n  container.style.left = `${newLeft}px`;\n  container.style.top = `${newTop}px`;\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"adding-click-functionality-with-hint-system",children:"Adding Click Functionality with Hint System"}),"\n",(0,s.jsx)(n.p,{children:"To make the element interactive, we can add a click handler that shows a notification:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Hint display function\nconst showHint = (message) => {\n  // Remove existing hints\n  const existingHint = document.querySelector('.drag-hint');\n  if (existingHint) {\n    existingHint.remove();\n  }\n\n  // Create hint element\n  const hint = document.createElement('div');\n  hint.className = 'drag-hint';\n  hint.textContent = message;\n  hint.style.position = 'fixed';\n  hint.style.top = '20px';\n  hint.style.left = '50%';\n  hint.style.transform = 'translateX(-50%)';\n  hint.style.backgroundColor = '#333';\n  hint.style.color = 'white';\n  hint.style.padding = '10px 20px';\n  hint.style.borderRadius = '5px';\n  hint.style.fontSize = '14px';\n  hint.style.zIndex = '10000';\n  hint.style.boxShadow = '0 2px 10px rgba(0,0,0,0.3)';\n  hint.style.opacity = '0';\n  hint.style.transition = 'opacity 0.3s ease';\n\n  document.body.appendChild(hint);\n\n  // Fade in\n  setTimeout(() => {\n    hint.style.opacity = '1';\n  }, 10);\n\n  // Auto-remove after 3 seconds\n  setTimeout(() => {\n    hint.style.opacity = '0';\n    setTimeout(() => {\n      if (hint.parentNode) {\n        hint.parentNode.removeChild(hint);\n      }\n    }, 300);\n  }, 3000);\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"final-complete-code",children:"Final Complete Code"}),"\n",(0,s.jsx)(n.p,{children:"Here's the final, fully debugged version:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>\u53EF\u62D6\u52A8\u56FE\u6807\u6587\u5B57</title>\n  <style>\n    body {\n      margin: 0;\n      height: 100vh;\n    }\n  </style>\n</head>\n<body>\n\n<script>\n  // Create container\n  const container = document.createElement('div');\n  container.style.display = 'flex';\n  container.style.flexDirection = 'column';\n  container.style.alignItems = 'center';\n  container.style.textAlign = 'center';\n  container.style.fontFamily = 'sans-serif';\n  container.style.position = 'fixed';\n  container.style.left = '20px';\n  container.style.bottom = '20px';\n  container.style.zIndex = '9999';\n  container.style.cursor = 'grab';\n  container.style.userSelect = 'none';\n\n  // Create icon\n  const img = document.createElement('img');\n  img.src = 'https://cdn-icons-png.flaticon.com/512/1828/1828817.png';\n  img.style.width = '60px';\n  img.style.display = 'block';\n  img.draggable = false;\n  img.style.pointerEvents = 'none';\n\n  // Create text\n  const text = document.createElement('div');\n  text.textContent = '\u56FE\u6807\u8BF4\u660E';\n  text.style.marginTop = '2px';\n  text.style.fontSize = '14px';\n  text.style.color = '#333';\n\n  // Add elements\n  container.appendChild(img);\n  container.appendChild(text);\n  document.body.appendChild(container);\n\n  // Drag state\n  let isDragging = false;\n  let hasDragged = false;\n  let offsetX = 0;\n  let offsetY = 0;\n\n  // Hint function\n  const showHint = (message) => {\n    const existingHint = document.querySelector('.drag-hint');\n    if (existingHint) {\n      existingHint.remove();\n    }\n\n    const hint = document.createElement('div');\n    hint.className = 'drag-hint';\n    hint.textContent = message;\n    hint.style.position = 'fixed';\n    hint.style.top = '20px';\n    hint.style.left = '50%';\n    hint.style.transform = 'translateX(-50%)';\n    hint.style.backgroundColor = '#333';\n    hint.style.color = 'white';\n    hint.style.padding = '10px 20px';\n    hint.style.borderRadius = '5px';\n    hint.style.fontSize = '14px';\n    hint.style.zIndex = '10000';\n    hint.style.boxShadow = '0 2px 10px rgba(0,0,0,0.3)';\n    hint.style.opacity = '0';\n    hint.style.transition = 'opacity 0.3s ease';\n\n    document.body.appendChild(hint);\n\n    setTimeout(() => {\n      hint.style.opacity = '1';\n    }, 10);\n\n    setTimeout(() => {\n      hint.style.opacity = '0';\n      setTimeout(() => {\n        if (hint.parentNode) {\n          hint.parentNode.removeChild(hint);\n        }\n      }, 300);\n    }, 3000);\n  };\n\n  // Event handlers\n  const handleMouseMove = (e) => {\n    if (!isDragging) return;\n    \n    if (e.buttons !== 1) {\n      stopDragging();\n      return;\n    }\n    \n    hasDragged = true;\n    \n    let newLeft = e.clientX - offsetX;\n    let newTop = e.clientY - offsetY;\n    \n    const containerRect = container.getBoundingClientRect();\n    const containerWidth = containerRect.width;\n    const containerHeight = containerRect.height;\n    \n    const windowWidth = window.innerWidth;\n    const windowHeight = window.innerHeight;\n    \n    newLeft = Math.max(0, Math.min(newLeft, windowWidth - containerWidth));\n    newTop = Math.max(0, Math.min(newTop, windowHeight - containerHeight));\n    \n    container.style.left = `${newLeft}px`;\n    container.style.top = `${newTop}px`;\n  };\n\n  const stopDragging = () => {\n    if (isDragging) {\n      isDragging = false;\n      container.style.cursor = 'grab';\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', stopDragging);\n    }\n  };\n\n  // Mouse down\n  container.addEventListener('mousedown', (e) => {\n    if (e.button !== 0) return;\n    \n    isDragging = true;\n    hasDragged = false;\n    offsetX = e.clientX - container.getBoundingClientRect().left;\n    offsetY = e.clientY - container.getBoundingClientRect().top;\n    container.style.cursor = 'grabbing';\n    container.style.bottom = 'auto';\n    \n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', stopDragging);\n  });\n\n  // Click handler\n  container.addEventListener('click', (e) => {\n    if (!hasDragged) {\n      showHint('\u4F60\u70B9\u51FB\u4E86\u53EF\u62D6\u62FD\u56FE\u6807\uFF01');\n    }\n  });\n<\/script>\n\n</body>\n</html>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Always clean up event listeners"})," to prevent memory leaks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Use ",(0,s.jsx)(n.code,{children:"e.buttons"})," for reliable button state detection"]})," during mouse movement"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Disable default drag behavior"})," for images and other draggable elements"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Track actual movement"})," rather than relying on time/distance for click detection"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implement boundary checking"})," to keep elements accessible"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test edge cases"})," like dragging outside the window"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consider performance"})," by adding listeners only when needed"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This implementation provides a smooth, reliable dragging experience with proper click detection and boundary constraints. The step-by-step debugging process shows how small issues can compound into major usability problems, and how systematic testing and fixing leads to a robust solution."}),"\n","\n",(0,s.jsx)(r.A,{})]})}function h(e={}){let{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}}}]);