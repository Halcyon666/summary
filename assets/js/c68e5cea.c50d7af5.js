"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2560],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>g});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),s=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},u=function(t){var e=s(t.components);return a.createElement(p.Provider,{value:e},t.children)},c="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,p=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),c=s(n),d=r,g=c["".concat(p,".").concat(d)]||c[d]||m[d]||o;return n?a.createElement(g,l(l({ref:e},u),{},{components:n})):a.createElement(g,l({ref:e},u))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i[c]="string"==typeof t?t:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2807:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={title:"Java\u4e0a\u4f20\u6587\u4ef6",sidebar_label:"Java\u4e0a\u4f20\u6587\u4ef6",sidebar_position:3},l=void 0,i={unversionedId:"Tech/Java/JavaBase/Java\u4e0a\u4f20\u6587\u4ef6",id:"Tech/Java/JavaBase/Java\u4e0a\u4f20\u6587\u4ef6",title:"Java\u4e0a\u4f20\u6587\u4ef6",description:"Controller\u63a5\u53e3",source:"@site/docs/01-Tech/01-Java/01-JavaBase/Java\u4e0a\u4f20\u6587\u4ef6.md",sourceDirName:"01-Tech/01-Java/01-JavaBase",slug:"/Tech/Java/JavaBase/Java\u4e0a\u4f20\u6587\u4ef6",permalink:"/summary/Tech/Java/JavaBase/Java\u4e0a\u4f20\u6587\u4ef6",draft:!1,editUrl:"https://github.com/Halcyon666/summary/blob/main/docs/01-Tech/01-Java/01-JavaBase/Java\u4e0a\u4f20\u6587\u4ef6.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Java\u4e0a\u4f20\u6587\u4ef6",sidebar_label:"Java\u4e0a\u4f20\u6587\u4ef6",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"APT \u4f7f\u7528",permalink:"/summary/Tech/Java/JavaBase/annotation processor"},next:{title:"Sping Core",permalink:"/summary/Tech/Java/Spring/Spring-Core"}},p={},s=[{value:"Controller\u63a5\u53e3",id:"controller\u63a5\u53e3",level:2},{value:"\u4f7f\u7528 Resttemplate \u4e0a\u4f20\u6587\u4ef6",id:"\u4f7f\u7528-resttemplate-\u4e0a\u4f20\u6587\u4ef6",level:2},{value:"\u4f7f\u7528 HttpClient \u4e0a\u4f20\u6587\u4ef6",id:"\u4f7f\u7528-httpclient-\u4e0a\u4f20\u6587\u4ef6",level:2}],u={toc:s},c="wrapper";function m(t){let{components:e,...n}=t;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"controller\u63a5\u53e3"},"Controller\u63a5\u53e3"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"\u5b9a\u4e49\u4e00\u4e2a\u53ef\u4ee5\u63a5\u6536\u6587\u4ef6\u7684Controller\u7c7b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package whalefall.filedownloadorup;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.multipart.MultipartFile;\n\n/**\n * @author: WhaleFall541\n * @date: 2021/11/25 22:29\n */\n@RestController\n@Slf4j\npublic class Test4HtmlController {\n\n    @PostMapping("upload1")\n    public String upload1(@RequestParam("file") MultipartFile file, @RequestParam("test") String test) {\n        log.info("upload1 {} test {}", file.getOriginalFilename(), test);\n        return "OK";\n    }\n\n}\n\n'))),(0,r.kt)("h2",{id:"\u4f7f\u7528-resttemplate-\u4e0a\u4f20\u6587\u4ef6"},"\u4f7f\u7528 Resttemplate \u4e0a\u4f20\u6587\u4ef6"),(0,r.kt)("p",null,"\u4f7f\u7528Spring-Boot \u65f6\u96c6\u6210Resttemplate \u65e0\u9700\u989d\u5916\u5bfc\u5305"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"\u4f7f\u7528 Resttemplate \u5355\u5143\u6d4b\u8bd5\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package whalefall.filedownloadorup;\n\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.http.*;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.io.File;\n\nimport static whalefall.filedownloadorup.TestHttpClientUpload1.FILE_PATH;\nimport static whalefall.filedownloadorup.TestHttpClientUpload1.UPLOAD_URL;\n\n/**\n * @author Halcyon\n * @since 1.0.0\n */\npublic class TestRestTemplateUpload {\n    private static final Logger logger = LoggerFactory.getLogger(TestHttpClientUpload1.class);\n    @Test\n    public void testResttemplateUpload() {\n        File file = new File(FILE_PATH);\n\n        // \u521b\u5efaRestTemplate\u5b9e\u4f8b\n        RestTemplate restTemplate = new RestTemplate();\n\n        // \u6784\u5efa\u8bf7\u6c42\u4f53\n        MultiValueMap<String, Object> requestBody = new LinkedMultiValueMap<>();\n        requestBody.add("file", new FileSystemResource(file)); // \u6dfb\u52a0\u6587\u4ef6\n        requestBody.add("test", "testResttemplateUpload test");\n\n        // \u8bbe\u7f6e\u8bf7\u6c42\u5934\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.MULTIPART_FORM_DATA);\n\n        // \u521b\u5efaHttpEntity\uff0c\u5c06\u8bf7\u6c42\u4f53\u548c\u8bf7\u6c42\u5934\u5c01\u88c5\u8fdb\u53bb\n        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(requestBody, headers);\n\n        // \u53d1\u9001POST\u8bf7\u6c42\n        ResponseEntity<String> response = restTemplate.exchange(UPLOAD_URL, HttpMethod.POST, requestEntity, String.class);\n\n        // \u83b7\u53d6\u670d\u52a1\u5668\u7684\u54cd\u5e94\u72b6\u6001\u7801\u548c\u54cd\u5e94\u4f53\n        int statusCode = response.getStatusCodeValue();\n        String responseBody = response.getBody();\n\n        Assertions.assertEquals(200, statusCode);\n        Assertions.assertEquals("OK", responseBody);\n    }\n}\n\n'))),(0,r.kt)("h2",{id:"\u4f7f\u7528-httpclient-\u4e0a\u4f20\u6587\u4ef6"},"\u4f7f\u7528 HttpClient \u4e0a\u4f20\u6587\u4ef6"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u5bfc\u5305")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},"    implementation 'org.apache.httpcomponents:httpclient:4.5.13'\n    implementation 'org.apache.httpcomponents:httpmime:4.5.13'\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"\u4f7f\u7528 HttpClient \u5355\u5143\u6d4b\u8bd5\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package whalefall.filedownloadorup;\n\nimport org.apache.http.HttpEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.entity.mime.MultipartEntityBuilder;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Objects;\n\n/**\n * @author Halcyon\n * @since 1.0.0\n */\npublic class TestHttpClientUpload1 {\n    // \u66ff\u6362\u4e3a\u8981\u53d1\u9001\u7684Excel\u6587\u4ef6\u8def\u5f84\n    public static final String FILE_PATH = Objects.requireNonNull(TestHttpClientUpload1.class.getResource("/exceltemplet/priceListTemplate.xlsx")).getPath();// \u66ff\u6362\u4e3a\u63a5\u6536\u6587\u4ef6\u7684\u670d\u52a1\u5668URL\n    public static final String UPLOAD_URL = "http://localhost:8080/upload1";\n    private static final Logger logger = LoggerFactory.getLogger(TestHttpClientUpload1.class);\n\n    @Test\n    public void testHttpClientUpload() {\n\n        File file = new File(FILE_PATH);\n\n        // \u521b\u5efaCloseableHttpClient\u5b9e\u4f8b\n        CloseableHttpClient httpClient = HttpClients.createDefault();\n\n        // \u521b\u5efaHttpPost\u8bf7\u6c42\n        HttpPost httpPost = new HttpPost(UPLOAD_URL);\n\n        // \u521b\u5efaMultipart\u5b9e\u4f53\n        MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n        builder.addBinaryBody("file", file, ContentType.APPLICATION_OCTET_STREAM, file.getName());\n\n        // \u6dfb\u52a0\u5176\u4ed6\u53c2\u6570\n        builder.addTextBody("test", "testHttpClientUpload test");\n\n        // \u8bbe\u7f6e\u8bf7\u6c42\u5b9e\u4f53\n        HttpEntity entity = builder.build();\n        httpPost.setEntity(entity);\n        int statusCode = 500;\n        // \u53d1\u9001HttpPost\u8bf7\u6c42\uff0c\u5e76\u83b7\u53d6\u670d\u52a1\u5668\u7684\u54cd\u5e94\n        try (CloseableHttpResponse response = httpClient.execute(httpPost)) {\n            // \u83b7\u53d6\u670d\u52a1\u5668\u7684\u54cd\u5e94\u72b6\u6001\u7801\n            statusCode = response.getStatusLine().getStatusCode();\n\n            // \u5728\u8fd9\u91cc\u53ef\u4ee5\u5904\u7406\u670d\u52a1\u5668\u7684\u54cd\u5e94\uff0c\u6bd4\u5982\u68c0\u67e5\u662f\u5426\u4e0a\u4f20\u6210\u529f\u7b49\n        } catch (IOException e) {\n            logger.error(e.getMessage(), e);\n        }\n        Assertions.assertEquals(200, statusCode);\n    }\n\n}\n'))))}m.isMDXComponent=!0}}]);