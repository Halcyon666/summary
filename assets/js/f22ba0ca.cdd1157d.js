"use strict";(self.webpackChunksummary=self.webpackChunksummary||[]).push([[4280],{508:(n,t,e)=>{e.d(t,{R:()=>r,x:()=>l});var i=e(9729);const s={},o=i.createContext(s);function r(n){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function l(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),i.createElement(o.Provider,{value:t},n.children)}},3909:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"Algorithm/LeetCode return twomedian of two positive intergers","title":"\u8fd4\u56de\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u4e2d\u4f4d\u6570","description":"\u4ee3\u7801\u6765\u81ea","source":"@site/docs/03-Algorithm/09-LeetCode return twomedian of two positive intergers.mdx","sourceDirName":"03-Algorithm","slug":"/Algorithm/LeetCode return twomedian of two positive intergers","permalink":"/summary/Algorithm/LeetCode return twomedian of two positive intergers","draft":false,"unlisted":false,"editUrl":"https://github.com/Halcyon666/summary/edit/main/docs/03-Algorithm/09-LeetCode return twomedian of two positive intergers.mdx","tags":[],"version":"current","lastUpdatedBy":"Halcyon666","lastUpdatedAt":1758367634000,"sidebarPosition":9,"frontMatter":{"title":"\u8fd4\u56de\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u4e2d\u4f4d\u6570","sidebar_label":"\u8fd4\u56de\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u4e2d\u4f4d\u6570"},"sidebar":"tutorialSidebar","previous":{"title":"\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u52a0","permalink":"/summary/Algorithm/LeetCode two link table add"},"next":{"title":"\u5f52\u5e76\u6392\u5e8f","permalink":"/summary/Algorithm/MergeSort"}}');var s=e(5813),o=e(508);const r={title:"\u8fd4\u56de\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u4e2d\u4f4d\u6570",sidebar_label:"\u8fd4\u56de\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u4e2d\u4f4d\u6570"},l=void 0,a={},m=[{value:"\u53c2\u8003\u8d44\u6599",id:"\u53c2\u8003\u8d44\u6599",level:3}];function u(n){const t={a:"a",code:"code",h3:"h3",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components},{TailProtocal:e}=t;return e||function(n,t){throw new Error("Expected "+(t?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("TailProtocal",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-s-114/",children:"\u4ee3\u7801\u6765\u81ea"})}),"\n\u6b64\u4ee3\u7801\u4e3a\u4e8c\u5206\u67e5\u627e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3alog2(m+n)"]}),"\n",(0,s.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ","todo  \u6b64\u9898\u7b2ck\u5c0f\u89e3\u6cd5\u5f85\u5b8c\u6210 \u6c42\u7b2ck\u5c0f\u7684\u6570\u5373\u53ef\u6c42\u4e2a \u4e2d\u4f4d\u6570"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'/**\n * @Author: WhaleFall541\n * @Date: 2021/6/8 20:23\n * \u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u5206\u522b\u4e3a m \u548c n \u7684\u6b63\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u6570\u7ec4 nums1 \u548c nums2\u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684 \u4e2d\u4f4d\u6570\n * @see <a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/</a>\n */\npublic class FindMedianSortedArrays {\n    public static void main(String[] args) {\n        int[] a1 = {1};\n        int[] a2 = {1, 2, 2, 3};\n        double res = findMedianSortedArrays(a1, a2);\n        System.out.println("res = " + res);\n    }\n\n    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        if (nums1.length > nums2.length) {\n            int[] temp = nums1;\n            nums1 = nums2;\n            nums2 = temp;\n        }\n\n        int m = nums1.length;\n        int n = nums2.length;\n\n        // \u5206\u5272\u7ebf\u5de6\u8fb9\u7684\u6240\u6709\u5143\u7d20\u9700\u8981\u6ee1\u8db3\u7684\u4e2a\u6570\n        int totalLeft = (m + n + 1) / 2;\n\n        // \u5728 nums1 \u7684\u533a\u95f4 [0, m] \u91cc\u67e5\u627e\u6070\u5f53\u7684\u5206\u5272\u7ebf\uff0c\n        // \u4f7f\u5f97 nums1[i - 1] <= nums2[j] && nums2[j - 1] <= nums1[i]\n        int left = 0;\n        // NOTE: \u8fd9\u91cc\u7684m \u5982\u679c\u4f60\u5f53\u6307\u9488\u5199\u6210m-1 \u5f53\u77ed\u7684\u6570\u7ec4\u957f\u5ea6\u4e3a1\u65f6 right = m-1 = 0;\n        int right = m;\n\n\n        while (left < right) {\n            // NOTE: right - left + 1 \u6b64\u5904+1\u662f\u4e3a\u907f\u514d\u4e00\u79cd\u60c5\u51b5\n            // \u5f53left =1\uff0cright =2 \u65f6 left + (right - left) / 2=1;\n            // \u8bbeif\u6761\u4ef6\u8d70\u4e86else\u5206\u652f left\u53c8\u88ab\u8d4b\u503c\u4e3a1\u4e86 \u7136\u540e\u5c31\u6ca1\u73a9\u6ca1\u4e86\u6b21\u5faa\u73af\u4e86\n            int i = left + (right - left + 1) / 2;\n            int j = totalLeft - i;\n            if (nums1[i - 1] > nums2[j]) {\n                // \u4e0b\u4e00\u8f6e\u641c\u7d22\u7684\u533a\u95f4 [left, i - 1]\n                right = i - 1;\n            } else {\n                // \u4e0b\u4e00\u8f6e\u641c\u7d22\u7684\u533a\u95f4 [i, right]\n                left = i;\n            }\n        }\n\n        int i = left;\n        int j = totalLeft - i;\n\n        // NOTE: i \u8868\u793a \u5206\u754c\u7ebf\u6709\u53f3\u8fb9\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 \u5f53i\u4e3a0\u65f6\u8bf4\u660e\u6570\u7ec4\u5de6\u8fb9\u8d8a\u754c\u5904\u7406\u4e3a\u4e00\u4e2a\u6781\u5c0f\u7684\u503c\n        int nums1LeftMax = i == 0 ? Integer.MIN_VALUE : nums1[i - 1];\n        // NOTE: \u89d2\u6807\u4e3am\u3001n\u65f6\u6570\u7ec4\u5df2\u7ecf\u53f3\u8fb9\u8d8a\u754c \u6b64\u65f6\u5904\u7406\u4e3a\u4e00\u4e2a\u5f88\u5927\u7684\u503c\n        int nums1RightMin = i == m ? Integer.MAX_VALUE : nums1[i];\n        int nums2LeftMax = j == 0 ? Integer.MIN_VALUE : nums2[j - 1];\n        int nums2RightMin = j == n ? Integer.MAX_VALUE : nums2[j];\n\n        if (((m + n) % 2) == 1) {\n            return Math.max(nums1LeftMax, nums2LeftMax);\n        } else {\n            return (double) ((Math.max(nums1LeftMax, nums2LeftMax) + Math.min(nums1RightMin, nums2RightMin))) / 2;\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"\u53c2\u8003\u8d44\u6599",children:"\u53c2\u8003\u8d44\u6599"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["LEETCODE",(0,s.jsx)(t.a,{href:"https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-s-114/",children:"\u89c6\u9891\u5730\u5740"})]}),"\n"]}),"\n",(0,s.jsx)(e,{})]})}function d(n={}){const{wrapper:t}={...(0,o.R)(),...n.components};return t?(0,s.jsx)(t,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}}}]);