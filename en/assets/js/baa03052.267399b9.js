"use strict";(self.webpackChunksummary=self.webpackChunksummary||[]).push([[2191],{3468:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var t=a(5893),r=a(1151);const i={title:"lambda usage",sidebar_label:"lambda usage",sidebar_position:1},s=void 0,l={id:"Java/JavaBase/lambda",title:"lambda usage",description:"Java 8 function programming",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/01-Java/01-JavaBase/lambda.mdx",sourceDirName:"01-Java/01-JavaBase",slug:"/Java/JavaBase/lambda",permalink:"/en/Java/JavaBase/lambda",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"lambda usage",sidebar_label:"lambda usage",sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"APT \u4f7f\u7528",permalink:"/en/Java/JavaBase/annotation processor"}},c={},o=[{value:"Java 8 function programming",id:"java-8-function-programming",level:2},{value:"Rebuild Legacy Code",id:"rebuild-legacy-code",level:3},{value:"Function Method Parameters Reload",id:"function-method-parameters-reload",level:3},{value:"Interface Inherit",id:"interface-inherit",level:3},{value:"Subcollector <code>groupingBy</code>",id:"subcollector-groupingby",level:3},{value:"Restructuring Realm Method",id:"restructuring-realm-method",level:3},{value:"Tips",id:"tips",level:3}];function d(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"java-8-function-programming",children:"Java 8 function programming"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"NOTES: Featured to Java 8 function programming"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"rebuild-legacy-code",children:"Rebuild Legacy Code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public Set<String> findLongTracks(List<Album> albums) {\n    Set<String> trackNames=new HashSet<>();\n    for(Album album : albums) {\n        for (Track track : album.getTrackList()) {\n            if (track.getLength() > 60) {\n                String name=track.getName();\n                trackNames.add(name);\n            }\n        }\n    }\n    return trackNames;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Reload 1 ",(0,t.jsx)(n.code,{children:"for"})," to ",(0,t.jsx)(n.code,{children:"forEach"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public Set<String> findLongTracks(List<Album> albums) {\n    Set<String> trackNames=new HashSet<>();\n    albums.stream()\n        .forEach(album-> {\n            album.getTracks()\n                .forEach(track-> {\n                    if (track.getLength() > 60) {\n                        String name=track.getName();\n                        trackNames.add(name);\n                    }\n                });\n        });\n    return trackNames;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Rebuild 2 ",(0,t.jsx)(n.code,{children:"if"})," to ",(0,t.jsx)(n.code,{children:"filter"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public Set<String> findLongTracks(List<Album> albums) {\n    Set<String> trackNames=new HashSet<>();\n    albums.stream()\n        .forEach(album-> {\n            album.getTracks()\n                .filter(track-> track.getLength() > 60)\n                .map(track-> track.getName())\n                .forEach(name-> trackNames.add(name));\n        });\n    return trackNames;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Restructuring 3 outer ",(0,t.jsx)(n.code,{children:"forEach"})," into ",(0,t.jsx)(n.code,{children:"faltMap"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public Set<String> findLongTracks(List<Album> albums) {\n    Set<String> trackNames=new HashSet<>();\n    albums.stream()\n        .flatMap(album-> album.getTracks())\n        .filter(track-> track.getLength() > 60)\n        .map(track-> track.getName())\n        .forEach(name-> trackNames.add(name));\n    return trackNames;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Rebuild 4 ",(0,t.jsx)(n.code,{children:"forEach"})," to add elements to ",(0,t.jsx)(n.code,{children:"collect"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public Set<String> findLongTracks(List<Album> albums) {\n    return albums.stream()\n        .flatMap(album-> album.getTracks())\n        .filter(track-> track.getLength() > 60)\n        .map(track-> track.getName())\n        .collect(toSet());\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"function-method-parameters-reload",children:"Function Method Parameters Reload"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'overloadedMethod((x, y)-> x+y);\n\nprivate interface IntegerBiFunction extends BinaryOperator<Integer> {\n}\nprivate void overloadedMethod(BinaryOperator<Integer> Lambda) {\n    System.out.print("BinaryOperator");\n}\nprivate void overloadedMethod(IntegerBiFunction Lambda) {\n    System.out.print("IntegerBinaryOperator");\n}\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Accepts ",(0,t.jsx)(n.code,{children:"BinaryOperator"})," and a subclass of the interface as parameters, respectively.When called these methods, the type of Lambda expression that JavaScript exported, is the type of the most specific function interface.For example, ",(0,t.jsx)(n.code,{children:"IntegerBinaryOperator"}),", when selected in two approaches to Example 4-8, is output."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"General principles"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If there is only one possible target type, derived by the parameter type in the corresponding function interface;"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If there are more than one possible target type, it is derived by the most specific type;"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If there are more than one possible target type and the most specific type is unclear, the specified type needs to be artificial."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"interface-inherit",children:"Interface Inherit"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public interface Jukebox {\n    public default String rock() {\n        return "... all over the world! ";\n    }\n}\n\npublic interface Carriage {\n    public default String rock() {\n        return "... from side to side";\n    }\n}\n\npublic class MusicalCarriage implements Carriage, Jukebox {\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"javac"})," does not specify which method should inherit in an interface, so the compiler will report\uff1aclass Medical Carriage inside herits related default results for rock() from types Carriage and Jukebox."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class MusicalCarriage\n    implements Carriage, Jukebox {\n    @Override\n    public String rock() {\n        return Carriage.super.rock();\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"General principles"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Class is better than interface.The methods defined in the interface can be overlooked if there is a declaratory or abstract method in the chain of inheritance."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Subclass is better than ParentIf an interface inherits another interface, and both interfaces define a default method, the method defined in the subclass was."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"There is no rule III.If the above two rules do not apply, the subcategory either needs to implement the method or declare it to be an abstract one."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"5",children:["\n",(0,t.jsxs)(n.li,{children:["For example, when using parallel currents, the ",(0,t.jsx)(n.code,{children:"forEach"})," method does not guarantee that elements are treated sequentially.If there is a need to ensure sequencing, the ",(0,t.jsx)(n.code,{children:"forEachOrdered"})," method should be used."]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"subcollector-groupingby",children:["Subcollector ",(0,t.jsx)(n.code,{children:"groupingBy"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public Map<Artist, List<String>> nameOfAlbums(Stream<Album> albums) {\n    return albums.collect(groupingBy(Album::getMainMusician, mapping(Album::getName, toList())));\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["mapping allows similar map actions on collector containers.However, it is necessary to specify what collection class to use, such as ",(0,t.jsx)(n.code,{children:"toList"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"restructuring-realm-method",children:"Restructuring Realm Method"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public long countFeature(ToLongFunction<Album> function) {\n    return albums.stream()\n        .mapToLong(function)\n        .sum();\n}\npublic long countTracks() {\n    return countFeature(album-> album.getTracks().count());\n}\npublic long countRunningTime() {\n    return countFeature(album-> album.getTracks()\n                        .mapToLong(track-> track.getLength())\n                        .sum());\n}\npublic long countMusicians() {\n    return countFeature(album-> album.getMusicians().count());\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tips",children:"Tips"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Whether an operation is inert or early is simple: to see only its return value.If the return value is Stream, it is an inert value; if the return value is another value or empty, it is an early value."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"By extracting the lambda logic into a single method, the method can be tested to cover all boundary cases"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Use peek method to observe lambda intermediate value"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'Set<String> nationalities = album.getMusicians()\n    .filter(artist-> artist.getName().startsWith("The"))\n    .map(artist-> artist.getNationality())\n    .peek(nation-> System.out.println("Found nationality: "+nation))\n    .collect(Collectors.<String>toSet());\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>l,a:()=>s});var t=a(7294);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);