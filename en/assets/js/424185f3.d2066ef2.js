"use strict";(self.webpackChunksummary=self.webpackChunksummary||[]).push([[852],{1860:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Container-Tech/docker/Docker-Command-and-Dockerfile","title":"Basic Docker Commands","description":"Image Related Commands","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/07-Container-Tech/docker/Docker-Command-and-Dockerfile.mdx","sourceDirName":"07-Container-Tech/docker","slug":"/Container-Tech/docker/Docker-Command-and-Dockerfile","permalink":"/summary/en/Container-Tech/docker/Docker-Command-and-Dockerfile","draft":false,"unlisted":false,"editUrl":"https://github.com/Halcyon666/summary/edit/main/i18n/en/docusaurus-plugin-content-docs/current/07-Container-Tech/docker/Docker-Command-and-Dockerfile.mdx","tags":[],"version":"current","lastUpdatedAt":1750494055000,"sidebarPosition":2,"frontMatter":{"title":"Basic Docker Commands","sidebar_label":"Basic Docker Commands","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"docker-\u914d\u7f6e\u56fd\u5185\u955c\u50cf\u5730\u5740","permalink":"/summary/en/Container-Tech/docker/docker-chinese register mirror address"},"next":{"title":"docker-compose\u4f7f\u7528","permalink":"/summary/en/Container-Tech/docker/docker-compose-configure-redis-cluster-jenkins"}}');var c=r(6070),i=r(5248);const o={title:"Basic Docker Commands",sidebar_label:"Basic Docker Commands",sidebar_position:2},d=void 0,s={},l=[{value:"Image Related Commands",id:"image-related-commands",level:2},{value:"Container Related Commands",id:"container-related-commands",level:2},{value:"Dockerfile",id:"dockerfile",level:2},{value:"Understand how CMD and ENTRYPOINT interact",id:"understand-how-cmd-and-entrypoint-interact",level:3},{value:"A Simple Example",id:"a-simple-example",level:3}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"image-related-commands",children:"Image Related Commands"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-shell",metastring:"script",children:"# Download image\ndocker pull xxx\n# Search image\ndocker search xxx\n# View downloaded images\ndocker images\n# View downloaded image IDs\ndocker images -q \n\n# Delete image \ndocker rmi containerId/SOURCE_IMAGE[:TAG]\n# Delete all images\ndocker rmi $(docker images -q)\ndocker images -q | xargs docker rmi \n\n# Delete images with tag <none>\ndocker rmi | xargs docker images | awk '{if ($2 == \"<none>\" )print $3}' | xargs docker rmi -f\n"})}),"\n",(0,c.jsx)(n.h2,{id:"container-related-commands",children:"Container Related Commands"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-shell",metastring:"script",children:"# Load a local image \ndocker load -i tomcat-8.0-jre.tar\n# Start a container \ndocker run -dp 8080:8080 tomcat-8.0-jre --name tomcat \n\ndocker run -p 8887:8887 -it  --name myideac jetbrains/projector-idea-c\ndocker start myideac\n\n# Enter interactive simulation\ndocker run -it debian /bin/bash\n# View running containers\ndocker ps\n# View all container IDs\ndocker ps -q\n# View all containers\ndocker ps -a \n# Run, restart, stop, kill container\ndocker start/restart/stop/kill containerId/name\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-shell",metastring:"script",children:"# Delete created containers\ndocker rm containerId/name:tag\ndocker rm $(docker ps -q)\n# Stop containers \ndocker stop $(docker ps -a | grep \"Exited\" | awk '{print $1 }')    \n# Delete containers  \ndocker rm $(docker ps -a | grep \"Exited\" | awk '{print $1 }')      \n# Delete images    \ndocker rmi $(docker images | grep \"none\" | awk '{print $3}')    \n\n# View logs\ndocker logs containerId/name\n# Display logs in real time\ndocker logs -tf containerId/name\n# Logs with timestamp at line beginning\ndocker logs -tail  5 containerId/name\n\n# View container resource usage\ndocker top containerId\n# Enter container interactive mode\ndocker exec -it containerId bash\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-shell",metastring:"script",children:'# Copy files/directories from container to host\ndocker cp containerId:/root/test.txt /root/\n\n# Copy files/directories from host to container\ndocker cp a.txt containerId:/root/\n\n# Package an image\ndocker commit -m "description xx" -a "author" containerId SOURCE_IMAGE[:TAG]\ndocker save redis:latest -o redis-cluster.tar\n\n# Upload to docker hub repository\ndocker tag redis:latest docker.io/whalefall541/redis:0.01\ndocker push docker.io/whalefall541/redis:0.01\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-shell",metastring:"script",children:"# View docker network configuration\ndocker network ls\n\n# Create custom network bridge\ndocker mynetwork create mynetwork\n# Assign container to created network bridge\ndocker run -dp 80:80 --network mynetwork redis\n# Delete network bridge\ndocker newnetwork rm mynetwork\n# View network bridge\ndocker inpsect mynetwork\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-shell",metastring:"script",children:"# Data volume specification\n# docker run -dp 80:80 tomcat -v /root/webapps:/root/webapps\ndocker run -dp 80:80 tomcat -v aa:/root/webapps\n# Data volume creation\ndocker volume create volume_1\n# Delete all unused volumes\ndocker volume prune \ndocker rm volume_1\n# View data volume\ndocker inspect volume_1\n\n# Restart docker \nsudo systemctl daemon-reload \nsudo systemctl restart docker\nsudo systemctl status docker\n"})}),"\n",(0,c.jsx)(n.h2,{id:"dockerfile",children:"Dockerfile"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"ADD"}),"\n",(0,c.jsx)(n.li,{children:"COPY"}),"\n",(0,c.jsx)(n.li,{children:"ENV"}),"\n",(0,c.jsx)(n.li,{children:"EXPOSE"}),"\n",(0,c.jsx)(n.li,{children:"FROM"}),"\n",(0,c.jsx)(n.li,{children:"LABEL"}),"\n",(0,c.jsx)(n.li,{children:"STOPSIGNAL"}),"\n",(0,c.jsx)(n.li,{children:"USER"}),"\n",(0,c.jsx)(n.li,{children:"VOLUME"}),"\n",(0,c.jsx)(n.li,{children:"WORKDIR"}),"\n",(0,c.jsx)(n.li,{children:"ONBUILD (when combined with one of the supported instructions above)"}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["For detailed tutorial, please see the official website ",(0,c.jsx)(n.a,{href:"https://docs.docker.com/engine/reference/builder/",children:"Dockerfile"})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.a,{href:"https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact",children:"how-cmd-and-entrypoint-interact"})}),"\n",(0,c.jsx)(n.h3,{id:"understand-how-cmd-and-entrypoint-interact",children:"Understand how CMD and ENTRYPOINT interact"}),"\n",(0,c.jsxs)(n.p,{children:["Both ",(0,c.jsx)(n.code,{children:"CMD"})," and ",(0,c.jsx)(n.code,{children:"ENTRYPOINT"})," instructions define what command gets executed when running a container.\nThere are few rules that describe their co-operation."]}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["Dockerfile should specify at least one of ",(0,c.jsx)(n.code,{children:"CMD"})," or ",(0,c.jsx)(n.code,{children:"ENTRYPOINT"})," commands."]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"ENTRYPOINT"})," should be defined when using the container as an executable."]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"CMD"})," should be used as a way of defining default arguments for an ",(0,c.jsx)(n.code,{children:"ENTRYPOINT"})," command\nor for executing an ad-hoc command in a container."]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"CMD"})," will be overridden when running the container with alternative arguments."]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["The table below shows what command is executed for different ",(0,c.jsx)(n.code,{children:"ENTRYPOINT"})," / ",(0,c.jsx)(n.code,{children:"CMD"})," combinations:"]}),"\n",(0,c.jsxs)(n.table,{children:[(0,c.jsx)(n.thead,{children:(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.th,{style:{textAlign:"left"}}),(0,c.jsx)(n.th,{style:{textAlign:"left"},children:"No ENTRYPOINT"}),(0,c.jsx)(n.th,{style:{textAlign:"left"},children:"ENTRYPOINT exec_entry p1_entry"}),(0,c.jsx)(n.th,{style:{textAlign:"left"},children:'ENTRYPOINT ["exec_entry", "p1_entry"]'})]})}),(0,c.jsxs)(n.tbody,{children:[(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{style:{textAlign:"left"},children:(0,c.jsx)(n.strong,{children:"No CMD"})}),(0,c.jsx)(n.td,{style:{textAlign:"left"},children:(0,c.jsx)(n.em,{children:"error, not allowed"})}),(0,c.jsx)(n.td,{style:{textAlign:"left"},children:"/bin/sh -c exec_entry p1_entry"}),(0,c.jsx)(n.td,{style:{textAlign:"left"},children:"exec_entry p1_entry"})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{style:{textAlign:"left"},children:(0,c.jsx)(n.strong,{children:'CMD ["exec_cmd", "p1_cmd"]'})}),(0,c.jsx)(n.td,{style:{textAlign:"left"},children:"exec_cmd p1_cmd"}),(0,c.jsx)(n.td,{style:{textAlign:"left"},children:"/bin/sh -c exec_entry p1_entry"}),(0,c.jsx)(n.td,{style:{textAlign:"left"},children:"exec_entry p1_entry exec_cmd p1_cmd"})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{style:{textAlign:"left"},children:(0,c.jsx)(n.strong,{children:'CMD ["p1_cmd", "p2_cmd"]'})}),(0,c.jsx)(n.td,{style:{textAlign:"left"},children:"p1_cmd p2_cmd"}),(0,c.jsx)(n.td,{style:{textAlign:"left"},children:"/bin/sh -c exec_entry p1_entry"}),(0,c.jsx)(n.td,{style:{textAlign:"left"},children:"exec_entry p1_entry p1_cmd p2_cmd"})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{style:{textAlign:"left"},children:(0,c.jsx)(n.strong,{children:"CMD exec_cmd p1_cmd"})}),(0,c.jsx)(n.td,{style:{textAlign:"left"},children:"/bin/sh -c exec_cmd p1_cmd"}),(0,c.jsx)(n.td,{style:{textAlign:"left"},children:"/bin/sh -c exec_entry p1_entry"}),(0,c.jsx)(n.td,{style:{textAlign:"left"},children:"exec_entry p1_entry /bin/sh -c exec_cmd p1_cmd"})]})]})]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Note"})}),"\n",(0,c.jsxs)(n.p,{children:["If ",(0,c.jsx)(n.code,{children:"CMD"})," is defined from the base image, setting ",(0,c.jsx)(n.code,{children:"ENTRYPOINT"})," will\nreset ",(0,c.jsx)(n.code,{children:"CMD"})," to an empty value. In this scenario, ",(0,c.jsx)(n.code,{children:"CMD"})," must be defined in the\ncurrent image to have a value."]}),"\n",(0,c.jsx)(n.p,{children:"You can override the ENTRYPOINT setting using --entrypoint,\nbut this can only set the binary to exec (no sh -c will be used)."}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"a-simple-example",children:"A Simple Example"}),"\n",(0,c.jsx)(n.p,{children:"Copy springboot file to container and run with specified spring configuration file"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-dockerfile",children:'FROM java\nENV JARNAME="demo-0.0.1-SNAPSHOT.jar"\nWORKDIR /root/app\nRUN /bin/bash -c "echo \'aaaa\' >> 1.txt"\nEXPOSE 80\nVOLUME ["/root/app"]\nENTRYPOINT ["java","-jar","demo-0.0.1-SNAPSHOT.jar", "-Dspring.config.location"]\nCMD ["application.yml"]\n\n#ENTRYPOINT ["echo","/root"]\n#CMD ["/root/app"]\n'})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-shell",metastring:"script",children:"docker build -t springboot:0.01 .\ndocker run -v /dockerlearn/dockerfilelearn:/root/app -p 80:80 --network rediscluster_default --rm springboot:0.01\n\ndocker run -p 8080:800 --rm learncase:latest\n"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Note"})}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["If ",(0,c.jsx)(n.code,{children:'ENTRYPOINT ["exec_entry", "p1_entry"]'})," is followed by\n",(0,c.jsx)(n.code,{children:'CMD ["p1_cmd", "p2_cmd"]'}),", then all parameters in CMD will be appended to ENTRYPOINT\nWhen ",(0,c.jsx)(n.code,{children:"docker run"})," is followed by parameters, it will override the parameters in CMD"]}),"\n",(0,c.jsxs)(n.li,{children:["CMD ENTRYPOINT array forms are both exec mode, do not support parsing local variables\nIf you want to parse, use this command ",(0,c.jsx)(n.code,{children:'ENTRYPOINT ["sh","-c","java -jar $JARNAME"]'})]}),"\n",(0,c.jsxs)(n.li,{children:["If you use ",(0,c.jsx)(n.code,{children:'ENTRYPOINT ["sh","-c",..]'})," or directly use ",(0,c.jsx)(n.code,{children:'ENTRYPOINT "echo Hello world"'}),"\nthen you cannot override parameters directly"]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"References"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://docs.docker.com/engine/reference/builder/",children:"Dockerfile"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact",children:"how-cmd-and-entrypoint-interact"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(a,{...e})}):a(e)}},5248:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>d});var t=r(758);const c={},i=t.createContext(c);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);