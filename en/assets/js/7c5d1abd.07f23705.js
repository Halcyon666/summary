"use strict";(self.webpackChunksummary=self.webpackChunksummary||[]).push([[2422],{3546:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(9729);const o={},a=i.createContext(o);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:n},e.children)}},3686:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Develop-Tools/Most used Git Commands","title":"Most Comprehensive Git Command Collection","description":"Configuration Commands","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/09-Develop-Tools/Most used Git Commands.mdx","sourceDirName":"09-Develop-Tools","slug":"/Develop-Tools/Most used Git Commands","permalink":"/summary/en/Develop-Tools/Most used Git Commands","draft":false,"unlisted":false,"editUrl":"https://github.com/Halcyon666/summary/edit/main/i18n/en/docusaurus-plugin-content-docs/current/09-Develop-Tools/Most used Git Commands.mdx","tags":[],"version":"current","lastUpdatedAt":1758292313000,"sidebarPosition":1,"frontMatter":{"title":"Most Comprehensive Git Command Collection","sidebar_label":"Most Comprehensive Git Command Collection","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Linux\u6269\u5c55\u78c1\u76d8\u7a7a\u95f4","permalink":"/summary/en/Linux/vmware-centos8 Expand or Shrink disk"},"next":{"title":"py replacement","permalink":"/summary/en/Develop-Tools/python-replacement-script"}}');var o=t(5813),a=t(3546);const r={title:"Most Comprehensive Git Command Collection",sidebar_label:"Most Comprehensive Git Command Collection",sidebar_position:1},s=void 0,c={},l=[{value:"Configuration Commands",id:"configuration-commands",level:2},{value:"Configure Global .gitignore",id:"configure-global-gitignore",level:2},{value:"View Commands",id:"view-commands",level:2},{value:"Undo Commands",id:"undo-commands",level:2},{value:"Create or Delete Related Commands",id:"create-or-delete-related-commands",level:2},{value:"Merge Commands",id:"merge-commands",level:2},{value:"Stash Content Commands",id:"stash-content-commands",level:2},{value:"Commit Related Commands",id:"commit-related-commands",level:2},{value:"Tag Commands",id:"tag-commands",level:2},{value:"Update Commands",id:"update-commands",level:2},{value:"How to Sync GitHub Fork Repository",id:"how-to-sync-github-fork-repository",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"configuration-commands",children:"Configuration Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:'ssh-keygen\ngit config --global user.name "whalefall541"\ngit config --global user.email "jackchen541@sina.com"\ngit config --global alias.ll "log --graph --pretty=format:\'%C(yellow)%h%Creset -%C(cyan)%d%Creset %s %Cgreen(%an, %cr)\' --abbrev-commit"\ngit config --global alias.a \'!git add -A && git commit -m\'\n'})}),"\n",(0,o.jsx)(n.h2,{id:"configure-global-gitignore",children:"Configure Global .gitignore"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"# It's best to write absolute path here, sometimes it might not work\ngit config --global core.excludesfile D:/project/.gitignore \n\n# .gitignore can only ignore files that were not tracked originally. If some files have been included in version management, modifying .gitignore is invalid.\n# The solution is to first delete the local cache (change to untracked state), then commit:\n\ngit rm -r --cached .\ngit add .\n"})}),"\n",(0,o.jsx)(n.h2,{id:"view-commands",children:"View Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"# View \ngit log --graph --pretty=format:'%C(yellow)%h%Creset -%C(cyan)%d%Creset %s %Cgreen(%an, %cr)' --abbrev-commit\n# View xxx commit content\ngit show <commit-id>\n# View reference records\ngit reflog\n# View file differences\ngit diff filename\n\n# View differences that are added but not committed\ngit diff --staged\ngit diff --cached\n# View summary statistics only\ngit diff --stat branch1 branch2\n\n# View differences of a certain file between two commits. The first is the starting hash, which should be one earlier than the current view\ngit diff <commit> <commit> xxx.java\n# View specific differences between two branches\ngit diff dev st \n\n\n# Diff all modified file contents at once, can also redirect to a certain file\ngit status | awk -F \"modified:\" '{if($2 != \"\") print $2}' | xargs git diff\n\n# View records that are committed but not pushed\ngit cherry -v\n\n# View who modified a certain line of file\ngit blame -L 58,100 filename\ngit blame -L 57,+10 filename\n"})}),"\n",(0,o.jsx)(n.h2,{id:"undo-commands",children:"Undo Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"# Undo all files at once\ngit reset . \ngit checkout .\n\n# Undo modify status\ngit checkout <filename>\n# Undo added files (if it's a new file it becomes untracked status, otherwise modify status)\ngit restore --staged test.txt\ngit rm --cached test.txt\n\n# Undo add commit modify (delete commit records completely, use with caution)\ngit reset --hard <commit-id>\n# Undo add, commit (change commit records to modify status)\ngit reset --mixed <commit-id>\n# Only undo commit (change commit records to add status)\ngit reset --soft <commit-id>\n\n# Undo one commit content\ngit revert <commit-id>git\n\n# Delete all local untracked records\ngit clean -df\n"})}),"\n",(0,o.jsx)(n.h2,{id:"create-or-delete-related-commands",children:"Create or Delete Related Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"# Associate local repository to remote repository\ngit remote add origin git@github.com:whalefall541/rebase-learn.git\n# Delete association\ngit remote rm origin\n\n# Delete remote branch\ngit push origin -d <branch-name>\n\n# Create local branch\ngit branch <branch-name>\n# Create and switch\ngit checkout -b <branch-name>\n# Delete local branch\ngit branch -D  <branch-name>\n"})}),"\n",(0,o.jsx)(n.h2,{id:"merge-commands",children:"Merge Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:'# Turn off automatic merge\ngit merge --no-ff -m "merge with no-ff" dev\n\n# Automatic rebase - replay another branch on current branch \ngit rebase [<branch-name> | <commit-id> | <head~n>]\n\n# Interactive rebase\ngit rebase -i <commit-id> <commit-id> \n\n`Generally use p s combination to merge multiple commits into one` \n# Note: when rebasing, commit id is left-open interval, right-closed interval;\n# Be very careful that the id after rebase should be the last one, unless you don\'t want the commit records after that id, never do this,\n# If you accidentally did it, pull from remote again\n\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous\n#                    commit\'s log message, unless -C is used, in which case\n#                    keep only this commit\'s message; -c is same as -C but\n#                    opens the editor\n\n\n# Rebase base branch content to current branch - rebase is moving HEAD pointer\ngit rebase <base-branch> <current-branch>\n\n# rebase --onto can rebase a branch located on a sub-branch to the main branch\n# Before rebase: current-upstream-branch is a sub-branch of base-branch \n# and current-branch is a sub-branch of current-upstream-branch\n# After rebase: current-upstream-branch and current-branch are each sub-branches of base-branch\ngit rebase --onto <base-branch> <current-upstream-branch> <current-branch>\n\n# Copy a certain commit from other branches to another branch\ngit cherry-pick <commit-id>\n'})}),"\n",(0,o.jsx)(n.h2,{id:"stash-content-commands",children:"Stash Content Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"git stash\ngit stash list\ngit pop\n\n# Stash partial files\ngit stash push filename\n\n# Interactive stash files\ngit stash -p\n"})}),"\n",(0,o.jsxs)(n.p,{children:["How to stash partial files ",(0,o.jsx)(n.a,{href:"https://www.jianshu.com/p/fe4d54cb6244",children:"stash part"})]}),"\n",(0,o.jsx)(n.h2,{id:"commit-related-commands",children:"Commit Related Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:'echo "# 123" >> README.md\ngit init\ngit add README.md\ngit commit -m "first commit"\n# Modify the comment pointed to by HEAD; notes: Don\'t amend public commits\ngit commit --amend -m "an updated commit message" --no-edit\n\ngit branch -M main\ngit remote add origin git@github.com:whalefall541/123.git\ngit push -u origin main\n\n# Push directly from dev branch to all other branches, push from branch1 to branch2\ngit push origin refs/heads/branch1:branch2\n'})}),"\n",(0,o.jsx)(n.h2,{id:"tag-commands",children:"Tag Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:'# Tag on current branch current commit:\ngit tag v1.0\n\n# If you want to tag on a specific historical commit:\ngit tag v0.9 f52c633\ngit tag -a <tagname> -m "<message>"\n\n# You can view tag information with the following command:\ngit show v0.1\n\n# If the tag is wrong, you can also delete it:\ngit tag -d v0.1\n\n# If you want to push a certain tag to remote, use command git push origin <tagname>\ngit push origin v1.0\n# Or, push all local tags that haven\'t been pushed to remote at once:\ngit push origin --tags    \n# If the tag has been pushed to remote, deleting remote tag is more troublesome, first delete locally:\ngit tag -d v0.9    \n# Then, delete from remote. Delete command is also push, but in the following format:\ngit push origin :refs/tags/v0.9\n'})}),"\n",(0,o.jsx)(n.h2,{id:"update-commands",children:"Update Commands"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://cloud.tencent.com/developer/section/1138793",children:"You can refer to this website"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"# Pull all branches\ngit fetch --all\n# Update a certain branch, if it's an aggregated project need to add --recurse-submodules=no \ngit fetch origin main:main --progress --prune\n \n# Rebase when pulling code - fetch and rebase \ngit pull -r origin main\n\n"})}),"\n",(0,o.jsx)(n.h2,{id:"how-to-sync-github-fork-repository",children:"How to Sync GitHub Fork Repository"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Configure forked repository\n",(0,o.jsx)(n.a,{href:"https://docs.github.com/en/github/collaborating-with-pull-requests/working-with-forks/configuring-a-remote-for-a-fork",children:"configuring-a-remote-for-a-fork"})]}),"\n",(0,o.jsxs)(n.li,{children:["Merging an upstream repository into your fork\n",(0,o.jsx)(n.a,{href:"https://docs.github.com/en/github/collaborating-with-pull-requests/working-with-forks/syncing-a-fork",children:"syncing-a-fork"})]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{title:"License",type:"tip",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["The code part of this work is licensed under ",(0,o.jsx)(n.a,{href:"https://www.apache.org/licenses/LICENSE-2.0",children:"Apache 2.0 License"}),". Under the premise of following the license, you can freely modify and republish the code, and use the code for commercial purposes. But it requires you to:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Attribution"}),": In original code and derivative code, retain original author attribution and code source information."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Retain License"}),": In original code and derivative code, retain Apache 2.0 license file."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["The documentation part of this work is licensed under ",(0,o.jsx)(n.a,{href:"http://creativecommons.org/licenses/by/4.0/",children:"Creative Commons Attribution 4.0 International License"}),". Under the premise of following the license, you can freely share, including copying and distributing this work in any medium or format, and you can also freely adapt, modify, transform or create derivative works based on this work. But it requires you to:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Attribution"}),": When using all or part of this document, indicate the original author and source information."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Non-commercial Use"}),": Cannot be used for commercial publication or any other commercial activities. For commercial use, please contact the author."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Share Alike"}),": Works adapted and modified based on this document should continue to be licensed under Creative Commons Attribution 4.0 International License."]}),"\n"]}),"\n"]}),"\n"]})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}}}]);