"use strict";(self.webpackChunksummary=self.webpackChunksummary||[]).push([[2480],{5944:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var s=t(5893),r=t(1151);const i={title:"Bean construction process",sidebar_label:"Bean construction process",sidebar_position:5},a=void 0,o={id:"Java/Spring/Bean Creating Process",title:"Bean construction process",description:"For the relevant code fromOfficial Codebase spring-test) please seespring-framework org.springframe.mylearntest package.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/01-Java/02-Spring/Bean Creating Process.mdx",sourceDirName:"01-Java/02-Spring",slug:"/Java/Spring/Bean Creating Process",permalink:"/en/Java/Spring/Bean Creating Process",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Bean construction process",sidebar_label:"Bean construction process",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"BeanFactoryPostProcessor",permalink:"/en/Java/Spring/BeanFactoryPostProcessor"},next:{title:"ApplicationContext",permalink:"/en/Java/Spring/ApplicationContext"}},c={},l=[{value:"Bean&#39;s instantiation and BeanWrapper",id:"beans-instantiation-and-beanwrapper",level:2},{value:"Get BeanWrapper",id:"get-beanwrapper",level:3},{value:"Set Bean&#39;s corresponding properties",id:"set-beans-corresponding-properties",level:3},{value:"Various Aware Interfaces",id:"various-aware-interfaces",level:3},{value:"BeanPostProcessor",id:"beanpostprocessor",level:3},{value:"Customize BeanPostProcessor",id:"customize-beanpostprocessor",level:4},{value:"InitializingBean and init-methods",id:"initializingbean-and-init-methods",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["For the relevant code from",(0,s.jsx)(n.a,{href:"https://github.com/spring-projects/spring-framework.git",title:"official source",children:"Official Codebase"})," spring-test) please see",(0,s.jsx)(n.a,{href:"https://github.com/Halcyon66/spring-frame-modified/tree/main/spring-test",children:"spring-framework"})," org.springframe.mylearntest package."]}),"\n",(0,s.jsx)(n.p,{children:"The corresponding bean definition will not be instantaneously instantiated once the container is started.We know that the container now only has BeanDefinition, with all its objects, to preserve the necessary information to be used in the instantiation phase.It is only when the requesting party requests an instance of an object through the BeanFactory getBean() method, that activity can trigger in the Bean instantiation. BeanFactory's getBean() method can be explicitly called by client objects or invisible inside the container.There are two cases of implicit calls."}),"\n",(0,s.jsx)(n.p,{children:"For BeanFactory, the object instantiates default to delay initialization.Normally, when the object A is requested and needs to be first instantiated, the container will instantiate the object on which the object A depends, if the object B it relies is also not instantiated before.This will instantiate object B\nin the container and other uninstantiated objects that the object A depends.This is a situation in which getBean() is invisible to the requesting party of the request."}),"\n",(0,s.jsx)(n.p,{children:"All bean definitions will be instantiated after ApplicationContext starts, and this feature has been mentioned several times in this boot.ApplicationContext, however, continues to follow the two phases of the Spring\ncontainer implementation process, although it will then call upon the instantiated method getBean() of all bean definitions registered to the container immediately after the start phase has been completed.This is why when you get a container reference of the ApplicationContext type, all objects inside the container have been instantiated.You are not convinced to check the refresh() method of class org.AbstractApplicationContext."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://s2.loli.net/2023/07/15/wGtkiR4ULcpFfQj.png",alt:""})}),"\n",(0,s.jsx)(n.h2,{id:"beans-instantiation-and-beanwrapper",children:"Bean's instantiation and BeanWrapper"}),"\n",(0,s.jsx)(n.h3,{id:"get-beanwrapper",children:"Get BeanWrapper"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:['When the container is implemented internally, the "Strategy Pattern" is used to determine how to initialize bean instances.Normally, the bean instance can be initialized or generated dynamically by reflection or CGLIB dynamic byte code.',(0,s.jsx)(n.code,{children:"org.springframe.beans.factory.Support.InstrumentStrategy"})," is the abstract interface of an instantiation strategy that provides a simple object instantiation function and can be instantiated by reflection but does not support object instantiation."]}),"\n",(0,s.jsx)(n.li,{children:"CglibSubclassingInantiationStrategy inherits SimpleInstantiationStrategy's ability to instantiate objects in a reflective manner and succeeds through the CGLIB dynamic byte code that enables class to dynamically generate a class of subclasses of a class and thus satisfies the object instantiation requirement required for the method to inject it.By default, the CglibSubclassingInstalment Strategy is used inside the container."}),"\n",(0,s.jsx)(n.li,{children:"The container can return the instantiated object instance if it obtains instantiated information based on the bean defined BeanDefintion, combined with CglibSubclassingInstallationStrategy and different bean\ndefinition types.However, there are some \u201cdot fixes\u201d on the way of return.It is not a direct return to a construction completed object, but a parcel of the built object with BeanWrapper and the corresponding BeanWrapper instance."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"set-beans-corresponding-properties",children:"Set Bean's corresponding properties"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'The BeanWrapper interface, commonly used within the Spring framework, has a delivery class org.springframe.beans.BeanWrapperImpl.Its role is to "package" a bean and then operate on the bean of the package, such as setting it or getting the corresponding value of the bean.A return to the BeanWrapper instance at the end of the first step instead of the original object instance is intended to "set object properties" in the second step.'}),"\n",(0,s.jsx)(n.li,{children:"The BeanWrapper definition inherits the org.springframework.beans.PropertyAccessor interface and can access object properties in a unified way; BeanWrapper\nThe definition also directly or indirectly inherits the PropertyEditorRegistry and TypeConverter interfaces.Do you want to remember CustomEditorConfigurer?When registering various PropertyEditors to a container, know who will use the PropertyEditor?Yes, BeanWrapper!After the first step of constructing the object, Spring will construct a BeanWrapperImpl, based on the object's example, and then copy a copy of the Property Editor's registered former CustomitorConfigurer to BeanWrapperImpl, which is why BeanWrapper is also the PropertyEditorRegistry.So, when BeanWrapper converts, set the value of an object, no one will be left behind."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://s2.loli.net/2023/07/22/Bm7DhsKjL9uAY2v.png",alt:"image-20230722171819091"})}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Use BeanWrapper Operation Object"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'Object provider = Class.forName("package.name.FXNewsProvider").newInstance(); \nObject listener = Class.forName("package.name.DowJonesNewsListener");\nObject persister = Class.forName("package.name.DowJonesNews/Person").newInstance();\nBeanWrapper NewsProvider = new BeanWrapperImpl(provider); \nnewsProvider. etPropertyValue("newsListener", listener";\nnewsProvider.setPropertyValue("newPersistener", persister);\n\nassertTrue(newsProvider.getWrappedInstance() instance;\nassertSame(provider, newsProvider.getWrappedInstance()");\nassisterSame(liser, newsProvider.getProfile");\nassetSame(persister, newsProvider.getPropertyValue");\n'})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)("summary",{children:"Operation Object"})," with Java Reflection API"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'Object provider = Class.forName("package.name.FXNewsProvider").newInstance();\nObject listener = Class.forName("package.name.DowJonesNewsListener");\nObject persister = Class.forName("package.name.DowJonesNews/Person").newInstance();\n\nClass providerClazz = provider.getClass();\nField listeneld = providerClazz. efield("newsListener");\nlistenerField.set(provider, listener);\nField persisterField = provider, Clazz.getField("newsListener");\npersonterField.set(provider, persister);\nassisterSame(listener, listenerField.get(provider));\nassertSame(personister, persisterField.get(provider));\n'})})]}),"\n",(0,s.jsx)(n.h3,{id:"various-aware-interfaces",children:"Various Aware Interfaces"}),"\n",(0,s.jsx)(n.p,{children:"When the object is instantiated and the associated properties and dependencies set, the Spring container will check if the current object instance implements a series of Aware.If so, then infuse the dependency specified in these Ahead interface definitions to the current object instance.These Ahead interfaces are as follows.\nFor BeanFactory Containers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"org.springframe.beans.factory.BeanNameAware.If the Spring container detects that the current object instance implements the interface, the beanName of the object instance will be set to the current object instance."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"org.springframe.beans.factory.BeanNameAware.If the container detects that the current object instance implements the interface, it will load the current object instance with Classloader\nto the current object.By default, you will use Classloaders for the org.springframe.util.ClassUtils."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"org.springframe.beans.factory.BeanNameAware.In introducing methods into, we mentioned different instances of using the interface to get prototype-type bean\neach time.If the object states that the BeanFactoryAware interface is implemented, the BeanFactory container will set itself to the current object instance.In this way, the current object example has a reference to the BeanFactory container and can be accessed as required by the objects allowed in the container."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"org.springframe.context.ResourceLoaderAware. ApplicationContext implements Spring's ResourceLoader\ninterface (detailed information is referenced).When the container detects the resource LoaderAhead interface, it sets the current ApplicationContext itself to the object instance so that the current object instance has a reference to its ApplicationContext."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"org.springframe.context.ApplicationEventPublisher. ApplicationContext is a container and the ApplicationEventPublisher\ninterface is implemented so that it can be used as ApplicationEventPublisher.Thus, the current ApplicationContext container will inject itself into the current object if it detects the currently instantiated object instance stating that the ApplicationEventPublisher Aware."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"org.springframe.context.ResourceLoaderAware. ApplicationContext provides internationalized information support via the MessageSource, i.e. I18n\n(Internationalization).It itself implements the MessageSource interface, so when it detects the MessageSourceAway interface for the current object, it will inject itself into the current object's instance."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"org.springframe.context.ApplicationEventPublisher. If the ApplicationContext container detects that the current object implements the ApplicationContext\ninterface, it will inject itself into the current object instance."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"beanpostprocessor",children:"BeanPostProcessor"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"BeanPostProcessor** simply remember that BeanPostProcessor exists in the instance of the object, while BeanFactoryPostProcessor exists in the start-up phase of the container.**"}),"\n"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"BeanPostProcessor"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"package org.springframework.beans.factory.config;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.lang.Nullable;\n\npublic interface BeanPostProcessor {\n\n    @Nullable\n    default Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        return bean;\n    }\n\n    @Nullable\n    default Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        return bean;\n    }\n\n}\n"})})]}),"\n",(0,s.jsx)(n.h4,{id:"customize-beanpostprocessor",children:"Customize BeanPostProcessor"}),"\n",(0,s.jsx)(n.p,{children:"Assuming that all IFXNewsListeners implementation classes in the system require a corresponding server connection password from a certain location and that the password saved in the system is encrypted, the password obtained from IFXNewsListeners will first need to decrypt the password obtained from the system before it can be sent."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Label implementation class that requires decryption"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"To be able to identify IFXNewsListeners that require decryption of server connection passwords, we declare the interface PasswordDecodable, and require the associated IFXNewsListener class to implement the interface."}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"PasswordDecpasable"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"package org.springframe.mylearntest.beanpostprocessor;\n\npublic interface PasswordDecodable\n    String getEncodedPassword();\n    void setDecodedPassword(String password);\n}\n"})})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"DowJones NewsListener"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"package org.springframework.mylearntest.beanpostprocessor;\n\nimport org.springframework.mylearntest.directcode.FXNewsBean;\nimport org.springframework.mylearntest.directcode.IFXNewsListener;\n\npublic class DowJonesNewsListener implements IFXNewsListener,PasswordDecodable {\n    private String password;\n    public String[] getAvailableNewsIds() {\n        // \u7701\u7565\n        return new String[0];\n    }\n    public FXNewsBean getNewsByPK(String newsId) {\n        // \u7701\u7565\n        return null;\n    }\n    public void postProcessIfNecessary(String newsId) {\n        // \u7701\u7565\n    }\n    public String getEncodedPassword() {\n        return this.password;\n    }\n    public void setDecodedPassword(String password) {\n        this.password = password;\n    }\n}\n"})})]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Implement the corresponding BeanPostProcessor process to process eligible Bean instances"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We distinguish between instances of objects to be processed through the PasswordDecodle Interface Statement, and after checking that the current object instance implements the interface, encrypted passwords are obtained from the current object instance and decrypted.The decrypted password set back to the current object's instance."}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"PasswordDecoddePostGraduate"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'package org.springframework.mylearntest.beanpostprocessor;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\n\npublic class PasswordDecodePostProcessor implements BeanPostProcessor {\n    public Object postProcessAfterInitialization(Object object, String beanName)\n            throws BeansException {\n        return object;\n    }\n    public Object postProcessBeforeInitialization(Object object, String beanName)\n            throws BeansException {\n        if(object instanceof PasswordDecodable){\n            String encodedPassword = ((PasswordDecodable)object).getEncodedPassword();\n            String decodedPassword = decodePassword(encodedPassword);\n            ((PasswordDecodable)object).setDecodedPassword(decodedPassword);\n        }\n        return object;\n    }\n    private String decodePassword(String encodedPassword) {\n        // \u5b9e\u73b0\u89e3\u7801\u903b\u8f91\n        encodedPassword = encodedPassword + "2mingwen";\n        return encodedPassword;\n    }\n}\n'})})]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Customize BeanPostProcessor"}),"\n"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"XML Configuration"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-XML",children:'<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"\n       xmlns:aop="http://www.springframework.org/schema/aop">\n    <bean id="dowJonesNewsListener" class="org.springframework.mylearntest.beanpostprocessor.DowJonesNewsListener">\n        <property name="decodedPassword" value="123sjfg@LL"></property>\n    </bean>\n\n    <bean id="passwordDecodePostProcessor" class="org.springframework.mylearntest.beanpostprocessor.PasswordDecodePostProcessor">\n    </bean>\n</beans>\n'})})]}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Test class"}),"\n"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"BeanPostProcessor"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'package org.springframe.mylearntest.beanpostprocessor;\n  \n\nimport org.springframe.context.ApplicationContext;\nimport org.springframe.context.support. lassPathXmlApplicationContext;\n\nPublic class Test4BeanPostProcessor\'s Lum\n    public stance voice main(String[] args) um\n        ApplicationContext beanFactory = new ClassPathXmlApplicationContext("beanpostprocessor/beanpostprocessor. ml");\n        DowJones NewsListener dowJones NewsListener = (DowJones NewsListener) beanFactory. etBean ("dowJonesNewsListener");\n        String encodedPassword = dowJonesNewsListener. etEncodedPassword();\n        System.out. rintln("encodedPassword = " + encodedPassword);// encodedPassword = 123 sjfg@LL2mingwen\n    }\n}\n'})})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["In fact, there is a special type of BeanPostProcessor that we do not mention and that its implementation takes place at a different time than the usual BeanPostProcessor.The ",(0,s.jsx)(n.code,{children:"org.springframe.beans.factory.config.InstantiationAwareBeanPostProcessor"})," interface can lead to some effect similar to the \u201cshort circuit\u201d of the circuit in the instantiation of the object.In practice, not all bean definitions registered in the Spring container are instantiated according to the processes in figures 4-10.Prior to all steps, i.e. before instantiating the bean object, the container will first check if the container has a BeanPostProcessor type of InantiationAwareBeanPostProcessor."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"If yes, first use the corresponding InantiationAwareBeanPostProcessor to construct an object instance.After a successful construction, return the completed object instance directly without continuing to follow the `regular process'.That is why it could create a \u201cshort road\u201d.*"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"initializingbean-and-init-methods",children:"InitializingBean and init-methods"}),"\n",(0,s.jsx)(n.p,{children:"org.springframe.beans.factory.InitializingBean is an object life-cycle marking interface widely used within containers."}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"InitializingBean"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"Public face InitializingBean\n\tvoid afterPropertiesSet() throughout Exception;\n}\n"})})]}),"\n",(0,s.jsx)(n.p,{children:'The effect is that the "BeanPostProcessor" process has been called in the Object instantiation process then tests whether the current object has achieved the InitializingBean interface and, if so, its afterPropertiesSet() method will be used to further adjust the state of the object instance.In some cases, for example, a business object cannot be used once the instantiation has been completed.This will allow the client to implement the interface and to follow up on the business object in the methodology afterPropertiesSet().'}),"\n",(0,s.jsxs)(n.p,{children:["If it is stipulated in the system development process that all custom initialization operations of business objects must be named after init(), in order to save the trouble of setting init-method one by one ",(0,s.jsx)(n.code,{children:"<bean>"}),", we can also use the top-level ",(0,s.jsx)(n.code,{children:"< The default-init-method of beans>"})," uniformly specifies this init() method name."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"References"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The book name\uff1aSpring revelator\uff1a"}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>a});var s=t(7294);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);