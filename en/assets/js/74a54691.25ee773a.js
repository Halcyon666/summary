"use strict";(self.webpackChunksummary=self.webpackChunksummary||[]).push([[180],{5248:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(758);const s={},t=i.createContext(s);function o(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:n},e.children)}},6919:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Java/Spring/IoC Inject 1","title":"IoC Injection Methods 1","description":"The related code for this article (from official source code spring-test module) can be found at spring-framework under the org.springframework.mylearntest package.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/01-Java/02-Spring/IoC Inject 1.mdx","sourceDirName":"01-Java/02-Spring","slug":"/Java/Spring/IoC Inject 1","permalink":"/summary/en/Java/Spring/IoC Inject 1","draft":false,"unlisted":false,"editUrl":"https://github.com/Halcyon666/summary/edit/main/i18n/en/docusaurus-plugin-content-docs/current/01-Java/02-Spring/IoC Inject 1.mdx","tags":[],"version":"current","lastUpdatedAt":1753970707000,"sidebarPosition":2,"frontMatter":{"title":"IoC Injection Methods 1","sidebar_label":"IoC Injection Methods 1","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Spring Core","permalink":"/summary/en/Java/Spring/Spring-Core"},"next":{"title":"IoC\u6ce8\u5165\u65b9\u5f0f2","permalink":"/summary/en/Java/Spring/IoC Inject2"}}');var s=r(6070),t=r(5248);const o={title:"IoC Injection Methods 1",sidebar_label:"IoC Injection Methods 1",sidebar_position:2},a=void 0,c={},d=[{value:"Constructor Injection",id:"constructor-injection",level:2},{value:"Setter Method Injection",id:"setter-method-injection",level:2},{value:"Interface Injection",id:"interface-injection",level:2},{value:"IoC Service Provider",id:"ioc-service-provider",level:2},{value:"BeanFactory Object Registration and Dependency Binding Methods",id:"beanfactory-object-registration-and-dependency-binding-methods",level:2},{value:"Direct Coding Method",id:"direct-coding-method",level:3},{value:"External Configuration File Method",id:"external-configuration-file-method",level:3}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The related code for this article (from ",(0,s.jsx)(n.a,{href:"https://github.com/spring-projects/spring-framework.git",title:"official source code",children:"official source code"})," spring-test module) can be found at ",(0,s.jsx)(n.a,{href:"https://github.com/Halcyon666/spring-framework-modified/tree/main/spring-test",children:"spring-framework"})," under the org.springframework.mylearntest package."]}),"\n",(0,s.jsx)(n.h2,{id:"constructor-injection",children:"Constructor Injection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"public FXNewsProvider(IFXNewsListener newsListner,IFXNewsPersister newsPersister) {\n    this.newsListener = newsListner;\n    this.newPersistener = newsPersister;\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Advantages: After the object is constructed, it is already in a ready state and can be used immediately."}),"\n",(0,s.jsx)(n.li,{children:"Disadvantages: When there are many dependent objects, the parameter list of the constructor will be quite long. When constructing objects through reflection, handling parameters of the same type will be difficult, and maintenance and usage will be troublesome. Moreover, in Java, constructors cannot be inherited and cannot set default values. For handling non-essential dependencies, multiple constructors may need to be introduced, and changes in parameter numbers may cause maintenance inconvenience."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"setter-method-injection",children:"Setter Method Injection"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"FXNewsProvider"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class FXNewsProvider {\n    private IFXNewsListener newsListener;\n    private IFXNewsPersister newPersistener;\n\n    public IFXNewsListener getNewsListener() {\n    \treturn newsListener;\n    }\n    public void setNewsListener(IFXNewsListener newsListener) {\n    \tthis.newsListener = newsListener;\n    }\n\n    public IFXNewsPersister getNewPersistener() {\n    \treturn newPersistener;\n    }\n    public void setNewPersistener(IFXNewsPersister newPersistener) {\n    \tthis.newPersistener = newPersistener;\n    }\n}\n"})})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Advantages: Because methods can be named, setter method injection is better than constructor injection in terms of descriptiveness. Additionally, setter methods can be inherited, allow setting default values, and have good IDE support."}),"\n",(0,s.jsx)(n.li,{children:"Disadvantages: The object cannot enter a ready state immediately after construction is completed."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"interface-injection",children:"Interface Injection"}),"\n",(0,s.jsxs)(n.p,{children:["For FXNewsProvider to let IoC Service Provider inject the dependent IFXNewsListener, it first needs to implement the IFXNewsListenerCallable interface. This interface will declare an injectNewsListner method (method name is arbitrary), and the parameter of this method is the type of the dependent object. In this way, the InjectionServiceContainer object, which corresponds to the IoC Service Provider, can inject the dependent object into the injected object FXNewsProvider through this interface method.\n",(0,s.jsx)(n.img,{src:"https://s2.loli.net/2023/07/15/SNQgVDHi5ruUso3.png",alt:""})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Disadvantages: Interface injection is not highly recommended nowadays and is basically in a "retired state". Because it forces the injected object to implement unnecessary interfaces, it is intrusive. Constructor injection and setter method injection do not require this.'}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"ioc-service-provider",children:"IoC Service Provider"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"What are the responsibilities of IoC Service Provider?"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Business object construction management: In IoC scenarios, business objects do not need to care about how dependent objects are constructed or obtained, but this work still needs to be done by someone. Therefore, IoC Service Provider needs to separate the object construction logic from the client to avoid this logic polluting the business object implementation.\nDependency binding between business objects:"}),"\n",(0,s.jsx)(n.li,{children:"Business object dependency management: IoC Service Provider combines all previously constructed and managed business objects, as well as identifiable dependency relationships between various business objects, and binds the objects that these objects depend on, thereby ensuring that each business object can be in a ready state when used."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"How to record dependency relationships between objects?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"It can record the correspondence between injected objects and their dependent objects through the most basic text files;"}),"\n",(0,s.jsx)(n.li,{children:"It can also record corresponding information through XML file formats with strong descriptiveness;"}),"\n",(0,s.jsx)(n.li,{children:"It can also register this corresponding information by writing code;"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Relationship between Spring IoC Container and IoC Service Provider"}),"\n",(0,s.jsx)(n.p,{children:"Spring's IoC container is an IoC Service Provider, but this is only part of the reason why it is named IoC. We cannot ignore the \"container\". Spring's IoC container is a lightweight container that provides IoC support. In addition to basic IoC support, it also provides support beyond IoC as a lightweight container. For example, on top of Spring's IoC container, Spring also provides corresponding AOP framework support, enterprise-level service integration and other services."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://s2.loli.net/2023/07/15/WX5mDwzVoFylCJZ.png",alt:"Relationship between IoC Container and Provider",title:"Relationship between IoC Container and Provider"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Spring provides BeanFactory and ApplicationContext"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"BeanFactory: Basic type IoC container that provides complete IoC service support. If not specifically specified, it adopts a lazy initialization strategy (lazy-load) by default. Only when the client object needs to access a certain managed object in the container will that managed object be initialized and dependency injection operations performed. Therefore, relatively speaking, the container startup speed is faster in the initial stage, and the required resources are limited. For scenarios with limited resources and not very strict functional requirements, BeanFactory is a more suitable IoC container choice."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"ApplicationContext: ApplicationContext is built on the basis of BeanFactory and is a relatively advanced container implementation. In addition to having all the support of BeanFactory, ApplicationContext also provides other advanced features, such as event publishing, internationalization information support, etc., which will be detailed later. Objects managed by ApplicationContext are all initialized and bound by default after this type of container starts. Therefore, compared to BeanFactory, ApplicationContext requires more system resources, and at the same time, because all initialization is completed at startup, the container startup time will be longer than BeanFactory. In scenarios where system resources are sufficient and more functions are required, ApplicationContext type containers are more suitable choices."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"As the basic IoC container provided by Spring, BeanFactory can complete all responsibilities as an IoC Service Provider, including business object registration and dependency relationship binding between objects."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"beanfactory-object-registration-and-dependency-binding-methods",children:"BeanFactory Object Registration and Dependency Binding Methods"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"Overall Dependency Design"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// 1-Design FXNewsProvider class for general news processing\npublic class FXNewsProvider{\n//...\n}\n// 2-Design IFXNewsListener interface to abstract different news acquisition methods of various news agencies, and provide corresponding implementation classes\npublic interface IFXNewsListener{\n//...\n}\n// and\npublic class DowJonesNewsListener implements IFXNewsListener {\n//...\n}\n// 3-Design IFXNewsPersister interface to abstract different data access methods, and implement corresponding implementation classes\npublic interface IFXNewsPersister {\n//...\n} \n// and\npublic class DowJonesNewsPersister implements IFXNewsPersister { \n//...\n}\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"direct-coding-method",children:"Direct Coding Method"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"1. Use BeanFactory through direct coding to implement registration and binding of FX news related classes"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'package org.springframework.mylearntest.beanf;\n\nimport org.springframework.beans.MutablePropertyValues;\nimport org.springframework.beans.PropertyValue;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.support.AbstractBeanDefinition;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.mylearntest.before.FXNewsProvider;\n\npublic class BeanFactoryFX {\n    public static void main(String[] args) {\n        DefaultListableBeanFactory beanRegistry = new DefaultListableBeanFactory();\n        BeanFactory container = bindViaCode(beanRegistry);\n        FXNewsProvider newsProvider = (FXNewsProvider)container.getBean("djNewsProvider");\n        newsProvider.getAndPersistNews();\n    }\n\n    // Because the passed DefaultListableBeanFactory implements both BeanFactory and BeanDefinitionRegistry interfaces,\n    // this forced type conversion will not cause problems. But note that a pure BeanDefinitionRegistry cannot be\n    // forcibly converted to BeanFactory type!\n    public static BeanFactory bindViaCode(BeanDefinitionRegistry registry) {\n        AbstractBeanDefinition newsProvider = new RootBeanDefinition(FXNewsProvider.class, 0, true);\n        AbstractBeanDefinition newsListener = new RootBeanDefinition(DowJonesNewsListener.class,0, true);\n        AbstractBeanDefinition newsPersister = new RootBeanDefinition(DowJonesNewsPersister.class, 0,true);\n        // 1. Register bean definitions to container\n        registry.registerBeanDefinition("djNewsProvider", newsProvider);\n        registry.registerBeanDefinition("djListener", newsListener);\n        registry.registerBeanDefinition("djPersister", newsPersister);\n        // 2.0 Specify dependency relationships\n        // 2.1 Can use constructor injection method\n        /*ConstructorArgumentValues argValues = new ConstructorArgumentValues();\n        argValues.addIndexedArgumentValue(0, newsListener);\n        argValues.addIndexedArgumentValue(1, newsPersister);\n        newsProvider.setConstructorArgumentValues(argValues);*/\n        // 2.2 Or use setter method injection\n        // Bind newsListener newPersistener to newsProvider\n        MutablePropertyValues propertyValues = new MutablePropertyValues();\n        propertyValues.addPropertyValue(new PropertyValue("newsListener",newsListener));\n        propertyValues.addPropertyValue(new PropertyValue("newPersistener",newsPersister));\n        newsProvider.setPropertyValues(propertyValues);\n        // 3.0 Binding completed \n        return (BeanFactory)registry;\n    }\n}\n'})})]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"2. Design IFXNewsListener interface to abstract different news acquisition methods of various news agencies, and provide corresponding implementation classes"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"package org.springframework.mylearntest.before;\n\npublic interface IFXNewsListener {\n    String[] getAvailableNewsIds();\n\n    FXNewsBean getNewsByPK(String newsId);\n\n    void postProcessIfNecessary(String newsId);\n}\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"package org.springframework.mylearntest.beanf;\n\nimport org.springframework.mylearntest.before.FXNewsBean;\nimport org.springframework.mylearntest.before.IFXNewsListener;\n\npublic class DowJonesNewsListener implements IFXNewsListener {\n    @Override\n    public String[] getAvailableNewsIds() {\n        return new String[0];\n    }\n\n    @Override\n    public FXNewsBean getNewsByPK(String newsId) {\n        return null;\n    }\n\n    @Override\n    public void postProcessIfNecessary(String newsId) {\n\n    }\n}\n"})})]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"3. Design IFXNewsPersister interface to abstract different data access methods, and implement corresponding implementation classes"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"package org.springframework.mylearntest.before;\n\npublic interface IFXNewsPersister {\n    void persistNews(FXNewsBean newsBean);\n}\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"package org.springframework.mylearntest.beanf;\n\nimport org.springframework.mylearntest.before.FXNewsBean;\nimport org.springframework.mylearntest.before.IFXNewsPersister;\n\npublic class DowJonesNewsPersister implements IFXNewsPersister {\n    @Override\n    public void persistNews(FXNewsBean newsBean) {\n\n    }\n}\n"})})]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"4. Design news provider class that depends on news listening and persistence classes"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"package org.springframework.mylearntest.before;\n\nimport org.apache.commons.lang3.ArrayUtils;\n\n\npublic class FXNewsProvider {\n    private IFXNewsListener newsListener;\n    private IFXNewsPersister newPersistener;\n    public FXNewsProvider(IFXNewsListener newsListner,IFXNewsPersister newsPersister) {\n        this.newsListener = newsListner;\n        this.newPersistener = newsPersister;\n    }\n\n    public IFXNewsListener getNewsListener() {\n        return newsListener;\n    }\n\n    public void setNewsListener(IFXNewsListener newsListener) {\n        this.newsListener = newsListener;\n    }\n\n    public IFXNewsPersister getNewPersistener() {\n        return newPersistener;\n    }\n\n    public void setNewPersistener(IFXNewsPersister newPersistener) {\n        this.newPersistener = newPersistener;\n    }\n\n    public FXNewsProvider() {\n    }\n\n    public void getAndPersistNews() {\n        String[] newsIds = newsListener.getAvailableNewsIds();\n        if (ArrayUtils.isEmpty(newsIds)) {\n            return;\n        }\n        for (String newsId : newsIds) {\n            FXNewsBean newsBean = newsListener.getNewsByPK(newsId);\n            newPersistener.persistNews(newsBean);\n            newsListener.postProcessIfNecessary(newsId);\n        }\n    }\n}\n"})})]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"5. Set up news class"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"package org.springframework.mylearntest.before;\n\npublic class FXNewsBean {\n}\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"external-configuration-file-method",children:"External Configuration File Method"}),"\n",(0,s.jsx)(n.p,{children:"Usually, according to different external configuration file formats, corresponding BeanDefinitionReader implementation classes need to be provided. The corresponding implementation classes of BeanDefinitionReader are responsible for reading and mapping the corresponding configuration file content to BeanDefinition, and then registering the mapped BeanDefinition to a BeanDefinitionRegistry. After that, BeanDefinitionRegistry completes bean registration and loading. Most of the work, including parsing file formats and assembling BeanDefinition, is done by the corresponding implementation classes of BeanDefinitionReader. BeanDefinitionRegistry is only responsible for safekeeping."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Properties Configuration File Method"})}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"binding-config.properties"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"djNewsProvider.(class)=org.springframework.mylearntest.ioc.directcode.FXNewsProvider\ndjNewsProvider.$0(ref)=djListener\ndjNewsProvider.$1(ref)=djPersister\n# djNewsProvider.newsListener(ref)=djListener\n# djNewsProvider.newPersistener(ref)=djPersister\ndjListener.(class)=org.springframework.mylearntest.ioc.propconfig.DjNewsListener\ndjPersister.(class)=org.springframework.mylearntest.ioc.propconfig.DjNewsPersister\n"})})]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"PropConfigTest"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'package org.springframework.mylearntest.directcode;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;\n\npublic class PropConfigTest {\n    public static void main(String[] args) {\n        // todo Caused by: java.lang.IllegalStateException: No bean class specified on bean definition\n        DefaultListableBeanFactory beanRegistry = new DefaultListableBeanFactory();\n        BeanFactory container = bindViaPropertiesFile(beanRegistry);\n        FXNewsProvider newsProvider =\n                (FXNewsProvider)container.getBean("djNewsProvider");\n        newsProvider.getAndPersistNews();\n    }\n\n    public static BeanFactory bindViaPropertiesFile(BeanDefinitionRegistry registry) {\n        PropertiesBeanDefinitionReader reader =\n                new PropertiesBeanDefinitionReader(registry);\n        reader.loadBeanDefinitions("classpath:binding-config.properties");\n        return (BeanFactory)registry;\n    }\n}\n'})})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"@deprecated as of 5.3, in favor of Spring's common bean definition formats"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"References"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Book Title: Spring Revealed Author: Wang Fuqiang"}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);