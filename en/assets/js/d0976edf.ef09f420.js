"use strict";(self.webpackChunksummary=self.webpackChunksummary||[]).push([[6253],{1694:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=t(5893),s=t(1151);const o={title:"ApplicationContext",sidebar_label:"ApplicationContext",sidebar_position:6},r=void 0,a={id:"Java/Spring/ApplicationContext",title:"ApplicationContext",description:"For the relevant code fromOfficial Source, please see Spring-test org. Spring frame.mylearntest package.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/01-Java/02-Spring/ApplicationContext.mdx",sourceDirName:"01-Java/02-Spring",slug:"/Java/Spring/ApplicationContext",permalink:"/en/Java/Spring/ApplicationContext",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"ApplicationContext",sidebar_label:"ApplicationContext",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Bean\u7684\u6784\u9020\u8fc7\u7a0b",permalink:"/en/Java/Spring/Bean Creating Process"},next:{title:"Joinpoint",permalink:"/en/Java/Spring/Joinpoint"}},c={},l=[{value:"Unified Resource Load Strategy",id:"unified-resource-load-strategy",level:2},{value:"Four Loadways",id:"four-loadways",level:2},{value:"Use ApplicationContext as ResourceLoader",id:"use-applicationcontext-as-resourceloader",level:3},{value:"Injection of resourceLoader type",id:"injection-of-resourceloader-type",level:3},{value:"Internationalization information support (i18n MessageSource)",id:"internationalization-information-support-i18n-messagesource",level:2},{value:"Container Internal Event Release",id:"container-internal-event-release",level:2},{value:"IoC related notes",id:"ioc-related-notes",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["For the relevant code from",(0,i.jsx)(n.a,{href:"https://github.com/spring-projects/spring-framework.git",children:"Official Source"}),", please see",(0,i.jsx)(n.a,{href:"https://github.com/Halcyon66/spring-frame-modified/tree/main/spring-test",children:" Spring-test"})," org. Spring frame.mylearntest package."]}),"\n",(0,i.jsx)(n.h2,{id:"unified-resource-load-strategy",children:"Unified Resource Load Strategy"}),"\n",(0,i.jsx)(n.p,{children:"Spring proposes a set of resource abstract and loading strategies based on the org.springframe.core.io.Resource and org.springframe.core.io.ResourceLoader interfaces."}),"\n",(0,i.jsx)(n.p,{children:"Resource: Interfaces can be tailored to the different types of resources, or to the different contexts in which the resources are located.Can help us find out the state of the resource, access the content of the resource, and even create new relative resources based on the current resource.We can inherit the abstract class org.springframe.core.io.AbstractResource."}),"\n",(0,i.jsx)(n.p,{children:"ResourceLoader: But how to locate and locate these resources should be the responsibility of ResourceLoader.the org.springframe.core.io.ResourceLoader interface is a uniform abstraction of the resource locator strategy, with the specific resource locator strategy provided by the corresponding resourceLoader."}),"\n",(0,i.jsx)(n.p,{children:"DefaultResourceLoader: ResourceLoader has a default delivery class, i.e. org.springframe.core.io.DefaultResourceLoader, where the default resource search logic is as follows."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"First check if the resource path is headed with classpath: prefix and, if so, try constructing a ClassPathResource type resource and returning it."}),"\n",(0,i.jsx)(n.li,{children:"Otherwise, (a) attempt to position the resource by Url, depending on the resource path and if MalformedURL Exception, it will construct the UrlResource type resource and return; and (b) assign the getResourceByPath(String) method to the getResourceByPath(String) method, DefaultResourceLoader, default logic is to construct the ClassPathResource type resources and return them."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://s2.loli.net/2023/07/15/3S4uLnEjAsDTgJa.png",alt:""})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://s2.loli.net/2023/07/15/gXVo8SKvnThpwZm.png",alt:""})}),"\n",(0,i.jsx)(n.h2,{id:"four-loadways",children:"Four Loadways"}),"\n",(0,i.jsx)(n.h3,{id:"use-applicationcontext-as-resourceloader",children:"Use ApplicationContext as ResourceLoader"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'ResourceLoader resourceLoader = new ClassPathXmlApplicationContext("\u914d\u7f6e\u6587\u4ef6\u8def\u5f84");'})}),"\n",(0,i.jsx)(n.h3,{id:"injection-of-resourceloader-type",children:"Injection of resourceLoader type"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Depends on ResourceLoader"}),"\n"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"resourceloader.xml "}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">\n\t<bean id="resourceLoader" class="org.springframework.core.io.DefaultResourceLoader">\n\t</bean>\n\n\t<bean id="fooBar" class="org.springframework.mylearntest.ioc.resourceloader.FooBar">\n\t\t<property name="resourceLoader" ref="resourceLoader"/>\n\t</bean>\n</beans>\n'})})]}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"The instance class of the ResourceLoaderAware or ApplicationContextAware interface has been implemented"}),"\n"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"resourceloader4ContextBoo.xml"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">\n\n\t<bean id="fooBar" class="org.springframework.mylearntest.ioc.resourceloader.FooBarImplApplicationContextAware">\n\t</bean>\n</beans>\n'})})]}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Injection of resource type"}),"\n"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"xmailer.xml"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-XML",children:'<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">\n\n\t<bean id="xMailer" class="org.springframework.mylearntest.ioc.resourceloader.XMailer">\n\t\t<property name="template" value="resourceloader/resources.default_template.vm"/>\n\t</bean>\n</beans>\n'})})]}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:["ApplicationContext's Resource Load Behavior\nWhen ClassPathXmlApplicationContext is instantiated, even if classpath",":or"," classpath*",":prefix"," is not specified, it will load bean definition configuration file from classpath, while FileSystemXmlApplicationContext is somewhat similar, if we specify conf/appContext.xml, it will try to load bean definitions file from the file system as we do with the following code."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"internationalization-information-support-i18n-messagesource",children:"Internationalization information support (i18n MessageSource)"}),"\n",(0,i.jsx)(n.p,{children:"Internationalization support provided by Java SE"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Locale"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Locale represents different countries and regions, and each country and region is represented here in Locale by the corresponding abbreviated code, including language code, as well as country code, which is Iso standard code.For example, Locale. CHINA represents China."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ResourceBundle"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"ResourceBundle stores information specific to a particular Locale (either String type information or object of any type).Usually ResourceBundle manages a set of information sequences, all of which have a single basename and then specific Locale information that can be differentiated according to additional language or area codes after basename.For example, we use a set of properties files to save information from different country regions. You can name the corresponding properties file\uff1a as below."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"messages.properties\nmessages_zh.properties\nmessages_zh_CN.properties\nmessages_en.properties\nmessages_en_US.properties\n"})}),"\n",(0,i.jsx)(n.p,{children:"Of these, the messages section of the file name is referred to as the basename of the resource to be loaded by ResourceBundle, while resources in other languages or areas add Locale specific code based on basename."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://s2.loli.net/2023/07/15/8Y4A7NIqHhxa6Qb.png",alt:""})}),"\n",(0,i.jsx)(n.p,{children:"If a business object needs international information support, the simplest way is to allow it to implement the MessageSourceAway interface and then register in the ApplicationContext container.However, the client's dependence on the ApplicationContext container is so strong that the packaging is more intrusive.And, indeed, if a true business object needs to rely on MessageSource, it can declare dependency directly by way of either construction injection or setter injection."}),"\n",(0,i.jsx)(n.h2,{id:"container-internal-event-release",children:"Container Internal Event Release"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Custom Event Publication\ngives a custom event type (define your own object). In order to distinguish between specific event types for a specific scenario, we need to define our own event type, usually by extending the java.util.EventObject class to achieve custom event types."}),"\n"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Defines Event Type"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"package org.springframework.mylearntest.ioc.eventpublication.applicationevent;\n\nimport org.springframework.context.ApplicationEvent;\nimport org.springframework.mylearntest.ioc.eventpublication.event.MethodExecutionStatus;\n\npublic class MethodExecutionEvent extends ApplicationEvent {\n\tprivate static final long serialVersionUID = -71960369269303337L;\n\tprivate String methodName;\n\tprivate MethodExecutionStatus methodExecutionStatus;\n\n\tpublic MethodExecutionEvent(Object source) {\n\t\tsuper(source);\n\t}\n\t\n\tpublic MethodExecutionEvent(Object source, String methodName, MethodExecutionStatus methodExecutionStatus) {\n\t\tsuper(source);\n\t\tthis.methodName = methodName;\n\t\tthis.methodExecutionStatus = methodExecutionStatus;\n\t}\n\t\n\tpublic String getMethodName() {\n\t\treturn methodName;\n\t}\n\t\n\tpublic void setMethodName(String methodName) {\n\t\tthis.methodName = methodName;\n\t}\n\t\n\tpublic MethodExecutionStatus getMethodExecutionStatus() {\n\t\treturn methodExecutionStatus;\n\t}\n\t\n\tpublic void setMethodExecutionStatus(MethodExecutionStatus methodExecutionStatus) {\n\t\tthis.methodExecutionStatus = methodExecutionStatus;\n\t}\n}\n"})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Defines the event listener interface"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"package org.springframe.mylearntest.ioc.event.event;\n\n\nimport java.util. ventListener;\n\n/**\n * Custom Event Listeners\n */\nPublic interface MethodExecutionEventListener extends EventListener\n\t/**\n\t * MethodExecutionEventEventEvent\n\t */\n\tvoid onMethodBegin (MethodExecution Event event);\n\t/**\n\t * Methodology Execution of Methodological Events\n\t */\n\tvoid onMethodExecution Event Event;\n}\n\n"})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"custom event listener implementation"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package org.springframework.mylearntest.ioc.eventpublication.event;\n\n/**\n * \u81ea\u5b9a\u4e49\u4e8b\u4ef6\u76d1\u542c\u5668\u5b9e\u73b0\n */\npublic class SimpleMethodExecutionEventListener implements MethodExecutionEventListener {\n\n\tpublic void onMethodBegin(MethodExecutionEvent evt) {\n\t\tString methodName = evt.getMethodName();\n\t\tSystem.out.println("start to execute the method[" + methodName + "].");\n\t}\n\n\tpublic void onMethodEnd(MethodExecutionEvent evt) {\n\t\tString methodName = evt.getMethodName();\n\t\tSystem.out.println("finished to execute the method[" + methodName + "].");\n\t}\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Defines the state enumeration class and event publisher"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"package org.springframework.mylearntest.ioc.eventpublication.event;\n\npublic enum MethodExecutionStatus {\n\tBEGIN,END\n}\n"})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Event Release Class"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package org.springframework.mylearntest.ioc.eventpublication.event;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MethodExecutionEventPublisher {\n\tprivate List<MethodExecutionEventListener> listeners = new ArrayList<>();\n\n\tpublic void methodToMonitor() {\n\t\tMethodExecutionEvent event2Publish = new MethodExecutionEvent(this, "methodToMonitor");\n\t\tpublishEvent(MethodExecutionStatus.BEGIN, event2Publish);\n\t\t// \u6267\u884c\u5b9e\u9645\u7684\u65b9\u6cd5\u903b\u8f91\n\t\t// ...\n\t\tpublishEvent(MethodExecutionStatus.END, event2Publish);\n\t}\n\n\t// \u4e3a\u4e86\u907f\u514d\u4e8b\u4ef6\u5904\u7406\u671f\u95f4\u4e8b\u4ef6\u76d1\u542c\u5668\u7684\u6ce8\u518c\u6216\u79fb\u9664\u64cd\u4f5c\u5f71\u54cd\u5904\u7406\u8fc7\u7a0b\uff0c\u6211\u4eec\u5bf9\u4e8b\u4ef6\u53d1\u5e03\u65f6\u70b9\u7684\u76d1\u542c\u5668\u5217\u8868\u8fdb\u884c\u4e86\u4e00\u4e2a\u5b89\u5168\u590d\u5236\uff08 safe-copy\uff09\n\tprotected void publishEvent(MethodExecutionStatus status, MethodExecutionEvent methodExecutionEvent) {\n\t\tList<MethodExecutionEventListener> copyListeners = new ArrayList<>(listeners);\n\t\tfor (MethodExecutionEventListener listener : copyListeners) {\n\t\t\tif (MethodExecutionStatus.BEGIN.equals(status)) {\n\t\t\t\tlistener.onMethodBegin(methodExecutionEvent);\n\t\t\t} else {\n\t\t\t\tlistener.onMethodEnd(methodExecutionEvent);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void addMethodExecutionEventListener(MethodExecutionEventListener listener) {\n\t\tthis.listeners.add(listener);\n\t}\n\n\tpublic void removeListener(MethodExecutionEventListener listener) {\n\t\tthis.listeners.remove(listener);\n\t}\n\n\tpublic void removeAllListeners() {\n\t\tthis.listeners.clear();\n\t}\n\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"test class"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"package org.springframework.mylearntest.ioc.eventpublication.event;\n\npublic class Test4Event {\n\tpublic static void main(String[] args) {\n\t\tMethodExecutionEventPublisher eventPublisher = new MethodExecutionEventPublisher();\n\t\teventPublisher.addMethodExecutionEventListener(new SimpleMethodExecutionEventListener());\n\t\teventPublisher.methodToMonitor();\n\t\teventPublisher.removeAllListeners();\n\t}\n}\n"})})]}),"\n",(0,i.jsx)(n.p,{children:"In doing so, it needs to be noted that in order to avoid the registration or removal of event listeners during the event handling, we have made a safe reproduction (safe-copy) of the list's listeners at the event launch point.In addition, events are published sequentially, so that the processing logic of the event listeners should be as brief as possible in order to be able to do so without compromising processing."}),"\n",(0,i.jsx)("img",{src:"https://s2.loli.net/2023/07/15/Qmwxcpa4qDJGMYu.png"}),"\n",(0,i.jsx)(n.p,{children:"Analysis of event release class structure in Spring container"}),"\n",(0,i.jsx)(n.p,{children:"The Spring's ApplicationContext container allows events to be published in the form of org.springframe.context.ApplicationEvent, and the definition of bean type registered in the container will be automatically identified by the ApplicationContext Context, which is responsible for listening to all events of the ApplicationEvent type published in the container."}),"\n",(0,i.jsx)(n.p,{children:"ApplicationEvent: Custom event types in the Spring packaging, inherited from java.util.EventObject, is an abstract class that needs to be provided to distinguish different situations according to the circumstances.By default, Spring provides three implementations."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ContextClosedEvent\uff1a ApplicationContext Context Containers are about to be closed."}),"\n",(0,i.jsx)(n.li,{children:"ContextRefreshedEvent\uff1a ApplicationContext Container Type\nwhich is published when initializing or refreshing."}),"\n",(0,i.jsx)(n.li,{children:"RequestHandling Event\uff1a Web, with a subclass ServletRequestHandledEvent providing an event related to a server specific to Java EE."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"ApplicationListener: Custom Event Listeners Interface Definition used in ApplicationContext Container, inherited from java.util.EventListener."}),"\n",(0,i.jsx)(n.p,{children:"ApplicationContext: The container automatically identifies and loads the bean definition of EventListener-type upon startup. Once the container has been published, these registrations will be notified to EventListener."}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"MethodExecutionEventListener"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package org.springframework.mylearntest.eventpublication.applicationevent;\n\n\nimport org.springframework.context.ApplicationEvent;\nimport org.springframework.context.ApplicationListener;\n\n@SuppressWarnings("rawtypes")\npublic class MethodExecutionEventListener implements ApplicationListener {\n    public void onApplicationEvent(ApplicationEvent evt) {\n        if (evt instanceof MethodExecutionEvent) {\n            // \u6267\u884c\u5904\u7406\u903b\u8f91\n        }\n    }\n}\n'})})]}),"\n",(0,i.jsx)(n.p,{children:"ApplicationContext: Remember the definition of ApplicationContext?In addition to the previous resourceLoader and MessageSource, the ApplicationContext Interface Interface was inherited from the ApplicationEventPublisher Interface, which provided statutory definitions of void publishEvent.It is easy to see that the ApplicationContext container is now acting as an event publisher.The specifics of the ApplicationContext container in terms of the implementation of the event release and the registration of the event listeners are not required to give parents but instead to subcontract them to an interface called org.springframe.context.event.ApplicationEventMulticaster."}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"MethodExeuctionEventPublisher"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package org.springframe.mylearntest.event.applicationevent;\n\nimport org.springframe.context.ApplicationEventPublisher;\nimport org.springframe.context.ApplicationEventPublisher;\nimport org.springframe.springframe.mylearntest.event.event. ethodExecutionStatus;\n\nPublic class MethodExeuctionEventPublisher policies ApplicationEventPublisher\n    Private ApplicationEventPublisher eventPublisher;\n\n    Public void methodToMonitor() LO\n        MethodExecution Event beginEvt = new\n                MethodExecutionEvent(this, "methodToMonitor", MethodExecutionStatus. EGIN);\n        this.event Publisher. ubishEvent(beginEvt);\n        // Perform Practical Methodological Logic\n        // ...\n        MethodExecutionEvent endEvent = new\n                MethodExecutionEvent(this, "methodToMonitor", MethodExecutionStatus. ND);\n        this.event Publisher. ubishEvent(endEvt);\n    }\n\n    Public void setApplicationEventPublisher (ApplicationEventPublisher appCtx) {\n        this. ventPublisher = appCtx;\n    }\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"applicationevent.xml"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">\n\n    <bean id="methodExecListener" class="org.springframework.mylearntest.eventpublication.applicationevent.MethodExecutionEventListener">\n    </bean>\n    <bean id="evtPublisher" class="org.springframework.mylearntest.eventpublication.applicationevent.MethodExeuctionEventPublisher">\n    </bean>\n\n</beans>\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Test4AppEvent"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package org.springframework.mylearntest.eventpublication.applicationevent;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class Test4AppEvent {\n    public static void main(String[] args) {\n        ApplicationContext context = new ClassPathXmlApplicationContext("eventpublication/applicationevent.xml");\n        MethodExeuctionEventPublisher evtPublisher = (MethodExeuctionEventPublisher) context.getBean("evtPublisher");\n        evtPublisher.methodToMonitor();\n    }\n}\n'})})]}),"\n",(0,i.jsx)(n.p,{children:"ApplicationEventMulticaster has an abstract implementation class - org.springframe.context.event.AbstractApplicationEventMulticaster, which performs the management function of event listeners.The event publishing function is entrusted to its subcategories. org.springframe.context.event.SimpleApplicationEventMulticaster.Its default uses SyncTaskExecutor to publish events.To avoid possible performance problems in this approach, we can provide other types of TaskExecutor implementations."}),"\n",(0,i.jsx)(n.p,{children:"The container starts and checks if there is an applicationEventMulticaster object named ApplicationEventMultiticaster in the container.In some cases, use the provided implementations, without default initializing a SimpleApplicationEventMulticaster as an ApplicationEventMulticaster that will be used."}),"\n",(0,i.jsx)("img",{src:"https://s2.loli.net/2023/07/15/TvPHprcI9eL4DSz.png"}),"\n",(0,i.jsx)(n.h2,{id:"ioc-related-notes",children:"IoC related notes"}),"\n",(0,i.jsx)(n.p,{children:"Look at depending on injections, half of which is scattered in the Java source code (@Autowired), half of which remains in the Xml configuration file and many bean labels still exist.\nWhen using @Autoware, you can find two or more instances of objects of the same type, you can use @Qualifier to further qualify dependency conditions and specify which id is specified."}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"xml Method"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<beans>\n    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>\n    <bean id="newsProvider" class="..FXNewsProvider"/>\n    <bean id="djNewsListener" class="..DowJonesNewsListener"/>\n    <bean id="reutersNewsListner" class="..ReutersNewsListener"/>\n    <bean id="djNewsPersister" class="..DowJonesNewsPersister"/>\n</beans>\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"@Qualifier on attribute"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class FXNewsProvider {\n    @Autowired\n    @Qualifier("reutersNewsListner")// \u6b64\u65f6\u6ce8\u5165id=reutersNewsListner\n    private IFXNewsListener newsListener;\n    @Autowired\n    private IFXNewsPersister newPersistener;\n    //...\n}\n'})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"@Qualifier annotation on parameter"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// @Qualifier annotation is on\npublic class FXNewsProvider Provider\n    // ...\n    @Autowired\n    public voice setUp (@Qualifier("reutersNewsListner") IFXNewsListener, FXNews Persist newistener) Fum\n        this. ewsListener = newsListener;\n        this. ePersistener = newPersistener;\n    }\n    // ...\n}\n'})})]}),"\n",(0,i.jsx)(n.p,{children:"Unlike @Autowire, it follows the code of conduct in the form of byName auto-binding, meaning that the IoC container will find the instance of beanName\nin the container according to the name specified by @Resource, and then infect the object found to the object that is marked by @Resource."}),"\n",(0,i.jsx)(n.p,{children:"@PostConstruct and @PreDestroy are not services for dependency injection. They are mainly used to mark object life cycle management methods, which are similar to Spring's InitializingBean and DisposableBean interfaces and init-   method and destroy-method in configurations."}),"\n",(0,i.jsx)(n.p,{children:"Just as @Autowired needs AutoAnnotationBeanPostProcessor to bridge it with IoC packaging, these JSR250 notes also need a BeanPostProcessor to help them achieve their own value.This BeanPostProcessor is org.springframe.context.annotation.CommonAnnotationBeanPostProcessor. Only the Common AnnotationBeanPostProcessor can make a difference by adding it to the container."}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"XML Configuration"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<beans>\n    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>\n    <bean id="newsProvider" class="..FXNewsProvider"/>\n    <bean id="djNewsListener" class="..DowJonesNewsListener"/>\n    <bean id="djNewsPersister" class="..DowJonesNewsPersister"/>\n</beans>\n'})})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"<context:annotation-config> "}),"No but help me register AutoiredAnnotationBeanPostProcessor and CommonAnnotationBeanPostProcessor to the container, and register PersistenceAnnotationBeanPostProctor and Require AnnotationBeanPostProcessor!"]}),"\n",(0,i.jsx)(n.p,{children:"After marking the relevant classes that make up the app with the corresponding annotation, the classpath-scanning function can start scanning from a base package.When a class is scanned to mark the corresponding annotation, relevant information from that class is extracted and the corresponding BeanDefinition, then the built BeanDefinition, is registered in the container."}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"XML Configuration"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<beans xmlns="http://www.springframework.org/schema/beans"\nxmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\nxmlns:context="http://www.springframework.org/schema/context"\nxsi:schemaLocation="http://www.springframework.org/schema/beans\nhttp://www.springframework.org/schema/beans/spring-beans-2.5.xsd\nhttp://www.springframework.org/schema/context\nhttp://www.springframework.org/schema/context/spring-context-2.5.xsd">\n\n<context:component-scan base-package="org.spring21"/></beans>\n'})})]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"References"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The book name\uff1aSpring revelator\uff1a"}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var i=t(7294);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);