"use strict";(self.webpackChunksummary=self.webpackChunksummary||[]).push([[9949],{5248:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>s});var r=t(758);const i={},a=r.createContext(i);function o(n){const e=r.useContext(a);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),r.createElement(a.Provider,{value:e},n.children)}},8463:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Algorithm/Base-Sort","title":"Radix Sort","description":"Reference Video","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/03-Algorithm/Base-Sort.mdx","sourceDirName":"03-Algorithm","slug":"/Algorithm/Base-Sort","permalink":"/summary/en/Algorithm/Base-Sort","draft":false,"unlisted":false,"editUrl":"https://github.com/Halcyon666/summary/edit/main/i18n/en/docusaurus-plugin-content-docs/current/03-Algorithm/Base-Sort.mdx","tags":[],"version":"current","lastUpdatedAt":1753970707000,"sidebarPosition":1,"frontMatter":{"title":"Radix Sort","sidebar_label":"Radix Sort","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"A Robust Draggable Element","permalink":"/summary/en/Frontend/Drag and Drop Container Movement"},"next":{"title":"\u4e8c\u5206\u63d2\u5165","permalink":"/summary/en/Algorithm/Binary-Insert"}}');var i=t(6070),a=t(5248);const o={title:"Radix Sort",sidebar_label:"Radix Sort",sidebar_position:1},s=void 0,l={},c=[];function u(n){const e={a:"a",blockquote:"blockquote",code:"code",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.a,{href:"https://www.bilibili.com/video/BV184411L79P?t=650",children:"Reference Video"}),"\n",(0,i.jsx)(e.a,{href:"https://github.com/whalefall541/learn4Algorithm",children:"GitHub Repository"})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Algorithm Thinking"}),":"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"The number of passes in radix sort equals the length of the maximum number"}),"\n"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"Use 10 buckets to collect values, first count the digit values corresponding to the count array, then accumulate the count array"}),"\n"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"Through the accumulated array, we can determine which elements are at which positions\nAs follows: count[5] = 7, there are 6 elements before it, and both indices 5 and 6 are numbers with 5 in the ones place\ncount [2, 3, 4, 4, 5, 7, 7, 7, 7, 7]\nresult [240, 430, 421, 532, 124, 115, 305]\nNOTE: The counting cumulative array and reverse backfilling of elements ensure the stability of the algorithm"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"package simpleAlgorithm;\n\nimport java.util.Arrays;\n\n/**\n * @Author: WhaleFall541\n * @Date: 2021/6/12 22:59\n * [Video](https://www.bilibili.com/video/BV184411L79P?t=650)\n * Algorithm thinking:\n * The number of passes in radix sort equals the length of the maximum number\n * Use 10 buckets to collect values, first count the digit values corresponding to the count array, then accumulate the count array\n * Through the accumulated array, we can determine which elements are at which positions\n * As follows: count[5] = 7, there are 6 elements before it, and both indices 5 and 6 are numbers with 5 in the ones place\n\n * NOTE: The counting cumulative array and reverse backfilling of elements ensure the stability of the algorithm\n */\npublic class RadixSort {\n    public static void main(String[] args) {\n        int[] arr = new int[]{444444224, 240, 115, 532, 305, 430, 124};\n        radixSort(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n\n    static void radixSort(int[] arr) {\n\n        int n = arr.length;\n        if (n == 0) return;\n\n        // 1. Find the maximum number\n        int max = arr[0];\n        for (int i = 0; i < n; i++)\n            if (arr[i] > max)\n                max = arr[i];\n\n        // Calculate the number of digits in the maximum number\n        int bit = String.valueOf(max).length();\n        for (int i = 0; i < bit; i++) {\n            int base = (int) Math.pow(10, i);\n\n            int[] count = new int[10];\n            int[] result = new int[arr.length];\n\n            // Accumulate corresponding positions in count array based on digits 0-9\n            for (int j = 0; j < n; j++) {\n                // Value at the digit position\n                int number = arr[j] / base % 10;\n                count[number]++;\n            }\n\n            // Cumulative counting\n            for (int j = 1; j < count.length; j++) {\n                count[j] = count[j - 1] + count[j];\n            }\n\n            for (int j = n - 1; j >= 0; j--) {\n                int number = arr[j] / base % 10;\n                // Place elements back to result according to cumulative array\n                //  count [2, 3, 4, 4, 5, 7, 7, 7, 7, 7]\n                //  result [240, 430, 421, 532, 124, 115, 305]\n                // --count[number] indicates how many elements are before the corresponding position in the array\n                // For example, count[5] = 7, there are 6 elements before it, and both indices 5 and 6 are numbers with 5 in the ones place\n                result[--count[number]] = arr[j];\n            }\n\n            // Put result set back to original array for next round of sorting\n            System.arraycopy(result, 0, arr, 0, n);\n            // Clear count array\n            Arrays.fill(count, 0);\n        }\n    }\n\n}\n"})})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}}}]);