"use strict";(self.webpackChunksummary=self.webpackChunksummary||[]).push([[9988],{5248:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(758);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}},5328:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Java/Spring/Spring-Core","title":"Spring Core","description":"Specifying a Short-lived Bean in a Long-lived Bean","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/01-Java/02-Spring/Spring-Core.mdx","sourceDirName":"01-Java/02-Spring","slug":"/Java/Spring/Spring-Core","permalink":"/summary/en/Java/Spring/Spring-Core","draft":false,"unlisted":false,"editUrl":"https://github.com/Halcyon666/summary/edit/main/i18n/en/docusaurus-plugin-content-docs/current/01-Java/02-Spring/Spring-Core.mdx","tags":[],"version":"current","lastUpdatedAt":1753970707000,"sidebarPosition":1,"frontMatter":{"title":"Spring Core","sidebar_label":"Spring Core","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Java File Upload","permalink":"/summary/en/Java/JavaBase/file upload"},"next":{"title":"IoC Injection Methods 1","permalink":"/summary/en/Java/Spring/IoC Inject 1"}}');var s=t(6070),a=t(5248);const r={title:"Spring Core",sidebar_label:"Spring Core",sidebar_position:1},o=void 0,l={},c=[{value:"Specifying a Short-lived Bean in a Long-lived Bean",id:"specifying-a-short-lived-bean-in-a-long-lived-bean",level:2},{value:"Prototype Bean in Singleton Bean",id:"prototype-bean-in-singleton-bean",level:2},{value:"<code>@Autowired</code> Field Underlying Implementation",id:"autowired-field-underlying-implementation",level:2},{value:"<code>@Autowired</code> or <code>@Resource</code> Specifying Implementation Classes",id:"autowired-or-resource-specifying-implementation-classes",level:2},{value:"Constructor Injection",id:"constructor-injection",level:2},{value:"Using AspectJ Annotations for AOP Configuration vs XML",id:"using-aspectj-annotations-for-aop-configuration-vs-xml",level:2},{value:"Closures and Callbacks",id:"closures-and-callbacks",level:2},{value:"<code>@Configurable</code> <code>@Configuration</code>",id:"configurable-configuration",level:2},{value:"Spring Boot Custom Event Publishing",id:"spring-boot-custom-event-publishing",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"specifying-a-short-lived-bean-in-a-long-lived-bean",children:"Specifying a Short-lived Bean in a Long-lived Bean"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"XML Configuration Method"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"proxy-target-class"})," ",(0,s.jsx)(n.code,{children:"default=true"})," uses CGlib for proxying; ",(0,s.jsx)(n.code,{children:"default=false"})," uses JDK dynamic proxy;"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"XML Configuration"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'\x3c!-- DefaultUserPreferences implements the UserPreferences interface --\x3e\n<bean id="userPreferences" class="com.stuff.DefaultUserPreferences" scope="session">\n\t<aop:scoped-proxy proxy-target-class="false"/>\n</bean>\n<bean id="userManager" class="com.stuff.UserManager">\n\t<property name="userPreferences" ref="userPreferences"/>\n</bean>\n'})})]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Annotation Method"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:' // CGLIB method\n @Scope(value="request", proxyMode = ScopedProxyMode.TARGET_CLASS)\n\n // JDK dynamic proxy method\n @Scope(value="request", proxyMode = ScopedProxyMode.INTERFACES)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"prototype-bean-in-singleton-bean",children:"Prototype Bean in Singleton Bean"}),"\n",(0,s.jsxs)(n.p,{children:["Method 1: ",(0,s.jsx)(n.code,{children:"lookup"}),", through lookup it will automatically search for beans of the same type for injection; note that methods using lookup must be abstract methods;"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component("AAA")\n@Scope(value = "prototype")\npublic class AAA {\n    @Bean\n    public AAA createAAA(A a,B b) {\n        return this;\n    }\n}\n\n@Component\npublic abstract class ControllerManager {\n\n    private AAA aaa;\n\n    @Lookup\n    public abstract AAA createAAA() ;\n\n    public void test() {\n        this.aaa = createAAA();\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Method 2: Implement ",(0,s.jsx)(n.code,{children:"ApplicationContextAware"})," to get the ",(0,s.jsx)(n.code,{children:"beanFactory"})," object, each method call will get a new singleton bean"]}),"\n",(0,s.jsxs)(n.h2,{id:"autowired-field-underlying-implementation",children:[(0,s.jsx)(n.code,{children:"@Autowired"})," Field Underlying Implementation"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"@Autowired"})," first injects by type, if there are multiple types, then injects by name; in the source code, setting values is implemented through reflection ",(0,s.jsx)(n.code,{children:"org.springframework.beans.DirectFieldAccessor.FieldPropertyHandler#setValue"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Override\npublic void setValue(@Nullable Object value) throws Exception {\n\ttry {\n\t\tReflectionUtils.makeAccessible(this.field);\n\t\tthis.field.set(getWrappedInstance(), value);\n\t} catch (IllegalAccessException ex) {\n\t\tthrow new InvalidPropertyException(getWrappedClass(), this.field.getName(),\n\t\t\t\t"Field is not accessible", ex);\n\t}\n}\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"autowired-or-resource-specifying-implementation-classes",children:[(0,s.jsx)(n.code,{children:"@Autowired"})," or ",(0,s.jsx)(n.code,{children:"@Resource"})," Specifying Implementation Classes"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"@Primary"})," on a specific sub-implementation class to specify the Bean to be injected as the current bean, choose one of the following injection methods"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Primary\n@Component\npublic class ProtoBeanImpl implements ProtoBean{\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Primary\n@Bean\npublic ProtoBeanImpl protoBean(){\n    return new ProtoBeanImpl();\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:'@Qualifier("xxx")'})," annotation to specify the type of bean to be injected"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Qualifier("protoBeanImpl2")\n@Autowired\nprivate ProtoBean bean;\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Autowired\npublic SingleBean(@Qualifier("protoBeanImpl2") ProtoBean proto) {\n    this.protoBeanImpl2 = (ProtoBeanImpl2) proto;\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"@Resource"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Resource(name="protoBeanImpl2")\nprivate ProtoBean protoBean;\n// Equivalent to the following, if name is not specified, defaults to variable name\n@Resource\nprivate ProtoBean protoBeanImpl2;\n'})}),"\n",(0,s.jsx)(n.h2,{id:"constructor-injection",children:"Constructor Injection"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Using constructor inject, do not need other annotation if all the properties is base type, using\n",(0,s.jsx)(n.code,{children:'@ConstructorProperties({"xxx","xxx",...})'})," to inject the value"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If just one constructor here, need not ",(0,s.jsx)(n.code,{children:"@Autowired"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Only one multi-argument constructor can be set ",(0,s.jsx)(n.code,{children:"@Autowired(required = true)"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If one more constructor are annotated with ",(0,s.jsx)(n.code,{children:" @Autowired(required = false)"}),"\nThe constructor with the greatest number of dependencies that can be satisfied\nby matching beans in the Spring container will be chosen"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"@Autowired"}),", ",(0,s.jsx)(n.code,{children:"@Inject"}),", ",(0,s.jsx)(n.code,{children:"@Value"}),", and ",(0,s.jsx)(n.code,{children:"@Resource"})," annotations are handled by Spring\nBeanPostProcessor implementations"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"using-aspectj-annotations-for-aop-configuration-vs-xml",children:"Using AspectJ Annotations for AOP Configuration vs XML"}),"\n",(0,s.jsx)(n.p,{children:"When using XML configuration, AOP configuration is scattered, part in XML and part in backend class files. This doesn't follow the DRY principle."}),"\n",(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.code,{children:"@AspectJ"}),", the entire AOP configuration is placed in one configuration class. ",(0,s.jsx)(n.code,{children:"@AspectJ"})," supports additional instance models with richer combinations, making each aspect a model unit.\nAt the same time, ",(0,s.jsx)(n.code,{children:"@AspectJ"})," can be parsed by both Spring AOP and AspectJ, allowing you to use AspectJ syntax to implement more complex aspect logic"]}),"\n",(0,s.jsx)(n.h2,{id:"closures-and-callbacks",children:"Closures and Callbacks"}),"\n",(0,s.jsxs)(n.p,{children:["Closure: Closures and anonymous functions are often used as synonyms. But strictly speaking, an anonymous function is literally a function that has not been given a name, while a closure is actually an instance of a function, that is, a structure that exists in memory. From an implementation perspective, if an anonymous function doesn't capture free variables, it can actually be implemented as a ",(0,s.jsx)(n.strong,{children:"function pointer"}),", or directly inlined to the call site. If it captures free variables, then it will be a closure; while a closure means including both function pointer and environment as two key elements. ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Closure_(computer_science)",children:"Reference"}),"\n",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Closure_(computer_science)",children:"Closure Sample"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public interface Adder {\n    int add(int x);\n}\n\npublic static Adder makeAdder(final int n) {\n    return new Adder() {\n        public int add(int x) {\n            return x + n;\n        }\n    };\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Callback: In computer programming, a callback function, or simply callback (Callback i.e., call then back - called by the main function and returns to the main function after computation), refers to passing a function through parameters to its code, a reference to some executable code ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Callback_(computer_programming)",children:"Reference"}),"\n",(0,s.jsx)(n.a,{href:"https://stackoverflow.com/questions/19405421/what-is-a-callback-method-in-java-term-seems-to-be-used-loosely",children:"Callback Sample"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"class RemoteClass {\n\n    private OnChangeListener mOnChangeListener;\n\n    void makeSomeChanges() {\n        /*\n        .. do something here and call callback\n        */\n        mOnChangeListener.onChanged(this, 1);\n    }\n\n    public void setOnChangeListener(OnChangeListener listener) {\n        mOnChangeListener = listener;\n    }\n\n    public interface OnChangeListener {\n        void onChanged(RemoteClass remoteClass, int test);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'class Test {\n\n    public static void main(String[] args) {    \n        RemoteClass obj = new RemoteClass();\n        obj.setOnChangeListener(demoChanged);\n        obj.makeSomeChanges();\n    }\n\t// this case remind me of spring framework lots of anonymous ObjectFactory call back\n    private static RemoteClass.OnChangeListener demoChanged = new RemoteClass.OnChangeListener() {\n        @Override\n        public void onChanged(RemoteClass remoteClass, int incoming) {\n            switch (incoming) {\n                case 1:\n                    System.out.println("I will take appropriate action!");\n                    break;\n                default:\n                    break;\n            }\n        }\n    };\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// callback in springframework 4.3.x \n// @see org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean\n// Create bean instance.\nif (mbd.isSingleton()) {\n\tsharedInstance = getSingleton(beanName, new ObjectFactory<Object>() {\n\t\t@Override\n\t\tpublic Object getObject() throws BeansException {\n\t\t\ttry {\n\t\t\t\treturn createBean(beanName, mbd, args);\n\t\t\t}\n\t\t\tcatch (BeansException ex) {\n\t\t\t\t// Explicitly remove instance from singleton cache: It might have been put there\n\t\t\t\t// eagerly by the creation process, to allow for circular reference resolution.\n\t\t\t\t// Also remove any beans that received a temporary reference to the bean.\n\t\t\t\tdestroySingleton(beanName);\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t}\n\t});\n\tbean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"configurable-configuration",children:[(0,s.jsx)(n.code,{children:"@Configurable"})," ",(0,s.jsx)(n.code,{children:"@Configuration"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"@Configuration"})," is a configuration class"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"@Configurable"})," is an Aspect that a bean depends on, and is not managed by Spring, but can be auto-injected"]}),"\n",(0,s.jsx)(n.h2,{id:"spring-boot-custom-event-publishing",children:"Spring Boot Custom Event Publishing"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["This example uses ",(0,s.jsx)(n.code,{children:"SpEL"})," (Spring Expression Language) expressions"]})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Define your own event ",(0,s.jsx)(n.code,{children:"MyEvent"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"/**\n * @Author: WhaleFall541\n * @Date: 2021/7/12 21:38\n */\npublic class MyEvent extends ApplicationEvent {\n    private final String address;\n    private final String content;\n    public MyEvent(Object source, String address, String content) {\n        super(source);\n        this.address = address;\n        this.content = content;\n    }\n    // getter and setter omit\n    @Override\n    public String toString() {\n        return \"MyEvent{\" +\n                \"address='\" + address + '\\'' +\n                \", content='\" + content + '\\'' +\n                '}';\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["Custom event publishing class ",(0,s.jsx)(n.code,{children:"MyEventPublish"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'/**\n * @Author: WhaleFall541\n * @Date: 2021/7/12 21:41\n */\n@Component\npublic class MyEventPublish implements ApplicationEventPublisherAware {\n    private ApplicationEventPublisher publisher;\n\n    @Override\n    public void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher) {\n        this.publisher = applicationEventPublisher;\n    }\n\n    public void publish(String address, String content) {\n        if ("aaa".equals(address)) {\n            publisher.publishEvent(new MyEvent(this, address, content));\n            return;\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Write event listener class"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'/**\n * @Author: WhaleFall541\n * @Date: 2021/7/12 21:38\n */\n@Component\npublic class MyListener implements ApplicationEventPublisherAware {\n    private Log log = LogFactory.getLog(MyListener.class);\n\n    // SpEL #a0 represents the first parameter\n    // @EventListener(condition = "#a0.content == \'foo\'")\n\n    // SpEL #event represents parameter with the same name\n    // @EventListener(condition = "#event.content == \'foo\'")\n\n    // If you want to represent an object, use @XXX testMethod is the bean name in the container\n    @EventListener(condition = "@testMethod.test().equals(#a0.content)")\n\n    // @EventListener({ContextStartedEvent.class, ContextRefreshedEvent.class})\n    public void process(MyEvent event) {\n        System.err.println("event test is ok " + event);\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"TestMethod"})," class"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:' @Component\n public class TestMethod {\n     public List<String> test() {\n         List<String> al = new ArrayList();\n         al.add("foo");\n         al.add("fool");\n         return al;\n     }\n }\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Test class"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Note that you need to import dependencies, here is the ",(0,s.jsx)(n.code,{children:"gradle"})," dependency configuration ",(0,s.jsx)(n.code,{children:"testImplementation 'org.springframework.boot:spring-boot-starter-test'"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@SpringBootTest\nclass Charter1Tests implements ApplicationContextAware {\n@Test\n void testApplicationEvent() {\n     MyEventPublish bean = context.getBean(MyEventPublish.class);\n     bean.publish("aaa", "foo");\n }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);