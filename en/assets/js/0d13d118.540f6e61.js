"use strict";(self.webpackChunksummary=self.webpackChunksummary||[]).push([[5085],{9913:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=t(5893),a=t(1151);const s={title:"IoC Injection Mode 2",sidebar_label:"IoC Injection Mode 2",sidebar_position:3},i=void 0,o={id:"Java/Spring/IoC Inject2",title:"IoC Injection Mode 2",description:"\u672c\u6587\u76f8\u5173\u4ee3\u7801(\u6765\u81ea\u5b98\u65b9\u6e90\u7801spring-test\u6a21\u5757)\u8bf7\u53c2\u89c1spring-framework org.springframework.mylearntest\u5305\u4e0b\u3002",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/01-Java/02-Spring/IoC Inject2.mdx",sourceDirName:"01-Java/02-Spring",slug:"/Java/Spring/IoC Inject2",permalink:"/en/Java/Spring/IoC Inject2",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"IoC Injection Mode 2",sidebar_label:"IoC Injection Mode 2",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"IoC Injection Mode 2",permalink:"/en/Java/Spring/IoC Inject 1"},next:{title:"BeanFactoryPostProcessor",permalink:"/en/Java/Spring/BeanFactoryPostProcessor"}},c={},l=[{value:"Distinction between auto-binding and manual binding",id:"distinction-between-auto-binding-and-manual-binding",level:2},{value:"Lazy loading configuration is not expected to take effect",id:"lazy-loading-configuration-is-not-expected-to-take-effect",level:2},{value:"Use of abstract properties",id:"use-of-abstract-properties",level:2},{value:"Scope",id:"scope",level:2},{value:"Stolen Pillars",id:"stolen-pillars",level:2},{value:"Method Injection",id:"method-injection",level:4},{value:"By achieving BeanFactoryAwaare",id:"by-achieving-beanfactoryawaare",level:4},{value:"By ObjectFactory",id:"by-objectfactory",level:4},{value:"Method Replace",id:"method-replace",level:4}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["\u672c\u6587\u76f8\u5173\u4ee3\u7801(\u6765\u81ea",(0,r.jsx)(n.a,{href:"https://github.com/spring-projects/spring-framework.git",title:"\u5b98\u65b9\u6e90\u7801",children:"\u5b98\u65b9\u6e90\u7801"}),"spring-test\u6a21\u5757)\u8bf7\u53c2\u89c1",(0,r.jsx)(n.a,{href:"https://github.com/Halcyon666/spring-framework-modified/tree/main/spring-test",children:"spring-framework"})," org.springframework.mylearntest\u5305\u4e0b\u3002"]}),"\n",(0,r.jsx)(n.h2,{id:"distinction-between-auto-binding-and-manual-binding",children:"Distinction between auto-binding and manual binding"}),"\n",(0,r.jsx)(n.p,{children:"Automatic bindings and manual and clear bindings have advantages and disadvantages.The advantages of automatic binding are as follows."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"To some extent, the workload of manual knocking on configuration information can be effectively reduced."}),"\n",(0,r.jsx)(n.li,{children:"In some cases, even if new dependencies have been added to the current object, no changes in configuration information are required as long as the corresponding dependencies exist in the container."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The advantages of automatic binding are as follows."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Automatic bindings are less obvious than explicit dependency.We can have a clear understanding of the entire system based on clear dependencies, but using automatic binding, it may be necessary to redirect the information between class definitions and configuration files and even between configuration files."}),"\n",(0,r.jsx)(n.li,{children:"In some cases, automatic binding does not meet system needs and even leads to anomalies or unpredictability.Automated binding based on type (byType) match, if another same type of bean definition is added to the system, then the whole system will collapse, and automatic binding based on the name (byName) match, if the bean definition type of the same name in the original system is replaced, which may occur inadvertently."}),"\n",(0,r.jsx)(n.li,{children:'With auto-binding, we may not be able to get good support for some tools, such as Spring IDE.Unlike BeanFactory, ApplicationContext will instantly instantly instantly instantiate all "singleton\'s bean definition" when the container starts'}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"lazy-loading-configuration-is-not-expected-to-take-effect",children:"Lazy loading configuration is not expected to take effect"}),"\n",(0,r.jsx)(n.p,{children:"The designation of lazy-init-bean as true only does not mean that the container will delay the initialization of that bean.If a non-delayed initial bean definition relies on lazy-init-bean, then the container will undoubtedly be instantiated first in the order of dependency and then instantiated in the latter case, as shown by the following code in\uff1a where delay in initialization fails."}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Lazy loading configuration failed"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'\x3c!--\u975e\u61d2\u52a0\u8f7dbean\u4f9d\u8d56\u4e00\u4e2a\u61d2\u52a0\u8f7d\u7684bean \u7531\u4e8e\u8981\u521d\u59cb\u5316\u975e\u61d2\u52a0\u8f7d\u7684bean\u56e0\u6b64\u4f9d\u8d56\u7684\u61d2\u52a0\u8f7d\u7684bean\u5fc5\u987b\u5b9e\u4f8b\u5316--\x3e\n<beans>\n    <bean id="lazy-init-bean" class="..." lazy-init="true"/> \n    <bean id="not-lazy-init-bean" class="...">\n        <property name="propName">\n            <ref bean="lazy-init-bean"/> \n        </property>\n    </bean>\n</beans>\n'})})]}),"\n",(0,r.jsx)(n.h2,{id:"use-of-abstract-properties",children:"Use of abstract properties"}),"\n",(0,r.jsx)(n.p,{children:"If you do not want containers to instantiate some objects when initializing them, you can assign their abstracts attributes to true values in order to prevent the packaging from instantiating them.This is particularly true for the ApplicationContext packaging, where by default, the ApplicationContext will instantiate all bean managed by the container at the time it is launched, except for bean marked abstract."}),"\n",(0,r.jsx)(n.h2,{id:"scope",children:"Scope"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Scope is used to state the restricted scene where the object in the container should be located, or when the object survives, that is, the container generates and assembles the objects before they enter their corresponding screen, and the packaging usually destroys the objects once the object is no longer within the scope of these screens."}),"\n",(0,r.jsx)(n.li,{children:"The Spring container initially provided two types of bean screen type\uff1asingleton and protoype, but after release 2.0 another three screen types were introduced, namely request, session and global session types.However, these three types are restricted and can only be used in web applications.That is, it is only reasonable to use these three scopes in the ApplicationContext, which supports web applications."}),"\n",(0,r.jsx)(n.li,{children:"The global session only makes sense in a portlet-based web application that maps to the global-range session of the portlet.If this class scope\nis used in a normal servlet-based web app, the container will treat it as a normal scope of the session type."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"stolen-pillars",children:"Stolen Pillars"}),"\n",(0,r.jsx)(n.h4,{id:"method-injection",children:"Method Injection"}),"\n",(0,r.jsx)(n.p,{children:"The Spring container offers a method called MethodInjection that can help us solve these problems.What we want to do is simple, as long as the getNewsBean method declaration conforms to the required format and notifies the container in the configuration file. When the method is called, it returns every instance of an object of the specified type."}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"XML Configuration"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"\n       xmlns:aop="http://www.springframework.org/schema/aop">\n    <bean id="dowJonesNewsListener" class="org.springframework.mylearntest.beanpostprocessor.DowJonesNewsListener">\n        <property name="decodedPassword" value="123sjfg@LL"></property>\n    </bean>\n\n    <bean id="passwordDecodePostProcessor" class="org.springframework.mylearntest.beanpostprocessor.PasswordDecodePostProcessor">\n    </bean>\n</beans>\n'})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"MockNewsPersist"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package org.springframework.mylearntest.mthdinject;\n    \nimport org.springframework.mylearntest.directcode.FXNewsBean;\nimport org.springframework.mylearntest.directcode.IFXNewsPersister;\n\npublic class MockNewsPersister implements IFXNewsPersister {\n    private FXNewsBean newsBean;\n    public void persistNews(FXNewsBean bean) {\n        persistNews();\n    }\n    public void persistNews() {\n        System.out.println("persist bean:"+getNewsBean());\n    }\n    public FXNewsBean getNewsBean() {\n        return newsBean;\n    }\n\n    public void setNewsBean(FXNewsBean newsBean) {\n        this.newsBean = newsBean;\n    }\n\n}\n'})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"test class"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package org.springframework.mylearntest.mthdinject;\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class Test4MockNewsPersister {\n    public static void main(String[] args) {\n        BeanFactory container = new ClassPathXmlApplicationContext("mthdinject.xml");\n        MockNewsPersister persister = (MockNewsPersister)container.getBean("mockPersister");\n        persister.persistNews();\n        persister.persistNews();\n        // persist bean:org.springframework.mylearntest.directcode.FXNewsBean@5be6e01c\n        // persist bean:org.springframework.mylearntest.directcode.FXNewsBean@5be6e01c\n    }\n}\n'})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"xml configuration"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<beans>\n     <bean id="newsBean" class="..domain.FXNewsBean" singleton="prototype">\n     </bean>\n     <bean id="mockPersister" class="..impl.MockNewsPersister">\n     \x3c!--Specify the method name that needs to be injected through the name attribute of <lookup-method>, and the bean attribute specifies the object that needs to be injected.\n     When the getNewsBean method is called, the container can return a new instance of the FXNewsBean type each time. --\x3e\n         <lookup-method name="getNewsBean" bean="newsBean"/>\n     </bean>\n</beans>\n'})})]}),"\n",(0,r.jsx)(n.h4,{id:"by-achieving-beanfactoryawaare",children:"By achieving BeanFactoryAwaare"}),"\n",(0,r.jsxs)(n.p,{children:["As long as the getNewsBean() method is implemented to ensure that every call to BeanFactory ",(0,r.jsx)(n.code,{children:'getBean ("newsBean")'})," can be obtained, a new FXNewsBean object example can also be obtained every time."]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"MockNewsPersist"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package org.springframework.mylearntest.beanfactorywareinject;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.mylearntest.directcode.FXNewsBean;\nimport org.springframework.mylearntest.directcode.IFXNewsPersister;\n\npublic class MockNewsPersister1 implements IFXNewsPersister, BeanFactoryAware {\n    private BeanFactory beanFactory;\n\n    public void setBeanFactory(BeanFactory bf) throws BeansException {\n        this.beanFactory = bf;\n    }\n\n    public void persistNews(FXNewsBean bean) {\n        persistNews();\n    }\n\n    public void persistNews() {\n        System.out.println("persist bean:" + getNewsBean());\n    }\n\n    public FXNewsBean getNewsBean() {\n        return (FXNewsBean) beanFactory.getBean("newsBean");\n    }\n}\n'})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"XML Configuration"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">\n\n    <bean id="newsBean" class="org.springframework.mylearntest.directcode.FXNewsBean" scope="prototype">\n    </bean>\n    <bean id="mockPersister1" class="org.springframework.mylearntest.beanfactorywareinject.MockNewsPersister1">\n    </bean>\n\n</beans>\n'})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"MockNewsPersist"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package org.springframework.mylearntest.beanfactorywareinject;\n\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport org.springframework.mylearntest.mthdinject.MockNewsPersister;\n\npublic class Test4MockNewsPersister1 {\n    public static void main(String[] args) {\n        BeanFactory container = new ClassPathXmlApplicationContext("beanfactoryawareinject.xml");\n        MockNewsPersister1 persister = (MockNewsPersister1)container.getBean("mockPersister1");\n        persister.persistNews();\n        persister.persistNews();\n    }\n}\n'})})]}),"\n",(0,r.jsx)(n.h4,{id:"by-objectfactory",children:"By ObjectFactory"}),"\n",(0,r.jsx)(n.p,{children:"ObjectFactoryCreatingFactoryBean is a FactoryBean implementation provided by Spring. It returns an ObjectFactory.The ObjectFactoryCreatingFactoryBean instance can be used to return the object of the container manager.In fact, ObjectFactoryCreatingFactoryBean implements the BeanFactoryAware, returning to the ObjectFactory instance is only one implementation specific to interaction with the Spring container.The advantage of using it is that it isolates direct reference by client to BeanFactory."}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"MockNewsPersist"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package org.springframework.mylearntest.objectfactoryinj;\n\nimport org.springframework.beans.factory.ObjectFactory;\nimport org.springframework.mylearntest.directcode.FXNewsBean;\nimport org.springframework.mylearntest.directcode.IFXNewsPersister;\n\n@SuppressWarnings({"rawtypes" })\npublic class MockNewsPersister2 implements IFXNewsPersister {\n    private ObjectFactory newsBeanFactory;\n    public void persistNews(FXNewsBean bean) {\n        persistNews();\n    }\n    public void persistNews() {\n        System.out.println("persist bean:"+getNewsBean());\n    }\n    public FXNewsBean getNewsBean() {\n        return (FXNewsBean) newsBeanFactory.getObject();\n    }\n    public void setNewsBeanFactory(ObjectFactory newsBeanFactory) {\n        this.newsBeanFactory = newsBeanFactory;\n    }\n}\n'})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"XML Configuration"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">\n\n    <bean id="newsBean" class="org.springframework.mylearntest.directcode.FXNewsBean" scope="prototype">\n    </bean>\n    <bean id="newsBeanFactory" class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">\n        <property name="targetBeanName">\n            <idref bean="newsBean"/>\n        </property>\n    </bean>\n\n    <bean id="mockPersister2" class="org.springframework.mylearntest.objectfactoryinj.MockNewsPersister2">\n        <property name="newsBeanFactory">\n            <ref bean="newsBeanFactory"/>\n        </property>\n    </bean>\n</beans>\n'})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"test class"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package org.springframework.mylearntest.objectfactoryinj;\n\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class Test4MockNewsPersister2 {\n    public static void main(String[] args) {\n        BeanFactory container = new ClassPathXmlApplicationContext("objectfactoryinj.xml");\n        MockNewsPersister2 persister = (MockNewsPersister2)container.getBean("mockPersister2");\n        persister.persistNews();\n        persister.persistNews();\n    }\n}\n'})})]}),"\n",(0,r.jsx)(n.h4,{id:"method-replace",children:"Method Replace"}),"\n",(0,r.jsx)(n.p,{children:"Replace the getAndPersistNews() method in FXNewsProvider with FXNewsProvider Methodology"}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"FXNewsProviderMethodReplaceer"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package org.springframework.mylearntest.methodreplacer;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.support.MethodReplacer;\n\nimport java.lang.reflect.Method;\n\npublic class FXNewsProviderMethodReplacer implements MethodReplacer {\n\n    private static final transient Log logger =\n            LogFactory.getLog(FXNewsProviderMethodReplacer.class);\n\n    public Object reimplement(Object target, Method method, Object[] args)\n            throws Throwable {\n        logger.info("before executing method["+method.getName()+\n                "] on Object["+target.getClass().getName()+"].");\n        System.out.println("sorry,We will do nothing this time.");\n        logger.info("end of executing method["+method.getName()+\n                "] on Object["+target.getClass().getName()+"].");\n        return null;\n    }\n}\n'})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"XML"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-XML",children:'<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">\n\n\t<bean id="FXNewsProvider" class="org.springframework.mylearntest.ioc.propconfig.FXNewsProvider">\n\t\t<constructor-arg index="0" ref="djNewsListener"/>\n\t\t<constructor-arg index="1" ref="djNewsPersister"/>\n\t\t<replaced-method name="getAndPersistNews" replacer="providerReplacer">\n\t\t</replaced-method>\n\t</bean>\n\n\t<bean id="djNewsListener" class="org.springframework.mylearntest.ioc.propconfig.DjNewsListener"/>\n\t<bean id="djNewsPersister" class="org.springframework.mylearntest.ioc.propconfig.DjNewsPersister"/>\n\t<bean id="providerReplacer"\n\t\t  class="org.springframework.mylearntest.ioc.methodreplacer.FXNewsProviderMethodReplacer"/>\n</beans>\n'})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"test class"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package org.springframework.mylearntest.methodreplacer;\n\n\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport org.springframework.mylearntest.propconfig.FXNewsProvider;\n\npublic class Test4FXNewsProviderMethodReplacer {\n    public static void main(String[] args) {\n        BeanFactory container = new ClassPathXmlApplicationContext("methodreplacer.xml");\n        FXNewsProvider fxNewsProvider = (FXNewsProvider)container.getBean("FXNewsProvider");\n        fxNewsProvider.getAndPersistNews();\n    }\n}\n'})})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"References"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The book name\uff1aSpring revelator\uff1a"}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>i});var r=t(7294);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);